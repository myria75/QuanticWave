# Generated from PythonParser.g4 by ANTLR 4.13.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

if "." in __name__:
    from .PythonParserBase import PythonParserBase
else:
    from PythonParserBase import PythonParserBase

def serializedATN():
    return [
        4,1,111,927,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,1,0,1,0,1,0,5,0,124,8,0,10,0,12,0,127,9,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,3,1,136,8,1,1,2,1,2,4,2,140,8,2,11,2,12,2,141,1,3,
        1,3,5,3,146,8,3,10,3,12,3,149,9,3,1,4,1,4,3,4,153,8,4,1,5,1,5,1,
        5,1,5,1,5,5,5,160,8,5,10,5,12,5,163,9,5,1,5,3,5,166,8,5,1,5,1,5,
        1,5,1,5,1,5,3,5,173,8,5,1,5,3,5,176,8,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,3,5,185,8,5,1,5,1,5,1,5,1,5,4,5,191,8,5,11,5,12,5,192,1,5,3,
        5,196,8,5,1,5,3,5,199,8,5,1,5,3,5,202,8,5,1,5,3,5,205,8,5,1,5,1,
        5,1,5,1,5,5,5,211,8,5,10,5,12,5,214,9,5,1,5,1,5,1,5,1,5,5,5,220,
        8,5,10,5,12,5,223,9,5,1,5,1,5,3,5,227,8,5,3,5,229,8,5,1,6,1,6,1,
        6,1,6,1,6,4,6,236,8,6,11,6,12,6,237,1,6,1,6,3,6,242,8,6,1,7,1,7,
        1,7,1,7,3,7,248,8,7,1,7,3,7,251,8,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,3,11,271,8,11,
        1,12,1,12,1,12,1,12,3,12,277,8,12,3,12,279,8,12,1,12,1,12,1,12,1,
        13,1,13,1,13,1,13,3,13,288,8,13,1,13,3,13,291,8,13,1,13,1,13,1,13,
        1,14,3,14,297,8,14,1,14,1,14,1,14,1,14,3,14,303,8,14,1,14,1,14,1,
        14,3,14,308,8,14,1,14,1,14,1,14,1,15,1,15,1,15,3,15,316,8,15,1,15,
        1,15,1,15,3,15,321,8,15,1,15,1,15,3,15,325,8,15,1,15,3,15,328,8,
        15,1,15,3,15,331,8,15,1,15,1,15,3,15,335,8,15,3,15,337,8,15,1,16,
        1,16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,5,18,348,8,18,10,18,12,18,
        351,9,18,1,19,1,19,1,19,3,19,356,8,19,1,19,3,19,359,8,19,1,20,1,
        20,1,20,3,20,364,8,20,1,21,1,21,1,21,5,21,369,8,21,10,21,12,21,372,
        9,21,1,21,3,21,375,8,21,1,21,3,21,378,8,21,1,22,1,22,3,22,382,8,
        22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,391,8,22,1,22,1,22,1,
        22,1,22,1,22,1,22,3,22,399,8,22,3,22,401,8,22,3,22,403,8,22,1,22,
        1,22,3,22,407,8,22,1,22,1,22,1,22,1,22,1,22,5,22,414,8,22,10,22,
        12,22,417,9,22,1,22,1,22,4,22,421,8,22,11,22,12,22,422,3,22,425,
        8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,434,8,22,1,22,1,22,
        1,22,1,22,5,22,440,8,22,10,22,12,22,443,9,22,1,22,1,22,1,22,1,22,
        3,22,449,8,22,1,22,1,22,1,22,1,22,5,22,455,8,22,10,22,12,22,458,
        9,22,3,22,460,8,22,1,23,1,23,3,23,464,8,23,1,23,1,23,4,23,468,8,
        23,11,23,12,23,469,1,23,1,23,3,23,474,8,23,1,23,3,23,477,8,23,1,
        24,1,24,1,24,1,25,1,25,1,25,1,25,5,25,486,8,25,10,25,12,25,489,9,
        25,1,25,1,25,3,25,493,8,25,1,25,3,25,496,8,25,1,25,1,25,1,25,1,25,
        3,25,502,8,25,1,25,1,25,1,25,3,25,507,8,25,3,25,509,8,25,1,26,1,
        26,1,26,5,26,514,8,26,10,26,12,26,517,9,26,1,26,3,26,520,8,26,1,
        27,1,27,1,27,5,27,525,8,27,10,27,12,27,528,9,27,1,27,3,27,531,8,
        27,1,28,1,28,1,28,3,28,536,8,28,1,29,1,29,1,29,5,29,541,8,29,10,
        29,12,29,544,9,29,1,30,1,30,1,30,3,30,549,8,30,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,557,8,31,1,31,1,31,3,31,561,8,31,1,31,1,31,3,31,
        565,8,31,1,32,1,32,1,32,3,32,570,8,32,1,32,1,32,1,32,3,32,575,8,
        32,1,32,1,32,3,32,579,8,32,1,32,3,32,582,8,32,1,32,3,32,585,8,32,
        1,32,1,32,3,32,589,8,32,3,32,591,8,32,1,33,1,33,1,33,5,33,596,8,
        33,10,33,12,33,599,9,33,1,34,1,34,1,34,3,34,604,8,34,1,34,3,34,607,
        8,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,3,37,619,
        8,37,1,37,1,37,1,37,1,37,1,37,1,37,5,37,627,8,37,10,37,12,37,630,
        9,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        3,38,644,8,38,1,38,1,38,1,38,3,38,649,8,38,3,38,651,8,38,1,38,5,
        38,654,8,38,10,38,12,38,657,9,38,1,39,1,39,3,39,661,8,39,1,39,1,
        39,5,39,665,8,39,10,39,12,39,668,9,39,1,39,1,39,3,39,672,8,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,5,39,695,8,39,10,39,12,39,
        698,9,39,1,40,1,40,1,40,3,40,703,8,40,1,40,1,40,1,40,3,40,708,8,
        40,1,40,1,40,1,40,3,40,713,8,40,1,40,1,40,1,40,1,40,3,40,719,8,40,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,728,8,40,1,40,1,40,1,40,
        4,40,733,8,40,11,40,12,40,734,3,40,737,8,40,1,41,1,41,1,41,1,41,
        1,41,1,41,3,41,745,8,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        754,8,41,5,41,756,8,41,10,41,12,41,759,9,41,1,41,3,41,762,8,41,1,
        41,1,41,1,41,1,41,1,41,1,41,3,41,770,8,41,1,42,1,42,3,42,774,8,42,
        1,42,1,42,1,42,1,42,3,42,780,8,42,5,42,782,8,42,10,42,12,42,785,
        9,42,1,42,3,42,788,8,42,3,42,790,8,42,1,43,1,43,1,43,5,43,795,8,
        43,10,43,12,43,798,9,43,1,43,3,43,801,8,43,1,44,1,44,1,44,1,44,1,
        44,1,44,5,44,809,8,44,10,44,12,44,812,9,44,1,45,1,45,1,46,1,46,1,
        46,3,46,819,8,46,1,47,1,47,1,48,1,48,3,48,825,8,48,1,49,1,49,1,49,
        3,49,830,8,49,1,50,1,50,1,50,3,50,835,8,50,1,50,3,50,838,8,50,1,
        50,3,50,841,8,50,1,51,1,51,3,51,845,8,51,1,51,1,51,1,51,1,51,1,51,
        3,51,852,8,51,1,52,1,52,1,52,5,52,857,8,52,10,52,12,52,860,9,52,
        1,52,3,52,863,8,52,1,53,1,53,1,53,1,53,3,53,869,8,53,1,53,1,53,3,
        53,873,8,53,1,54,1,54,1,54,5,54,878,8,54,10,54,12,54,881,9,54,1,
        54,3,54,884,8,54,1,55,1,55,1,55,1,55,3,55,890,8,55,1,55,3,55,893,
        8,55,3,55,895,8,55,1,55,1,55,3,55,899,8,55,1,55,3,55,902,8,55,3,
        55,904,8,55,1,56,1,56,3,56,908,8,56,1,57,1,57,1,57,1,57,1,57,3,57,
        915,8,57,1,58,1,58,1,58,1,58,3,58,921,8,58,3,58,923,8,58,1,59,1,
        59,1,59,0,4,74,76,78,88,60,0,2,4,6,8,10,12,14,16,18,20,22,24,26,
        28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,
        72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,
        112,114,116,118,0,10,1,0,52,53,1,0,81,93,2,0,66,67,71,71,3,0,55,
        55,68,70,79,79,1,0,66,67,1,0,64,65,2,0,39,40,107,107,1,0,95,98,2,
        0,55,55,59,59,1,0,41,51,1060,0,125,1,0,0,0,2,135,1,0,0,0,4,139,1,
        0,0,0,6,143,1,0,0,0,8,152,1,0,0,0,10,228,1,0,0,0,12,241,1,0,0,0,
        14,243,1,0,0,0,16,254,1,0,0,0,18,259,1,0,0,0,20,263,1,0,0,0,22,267,
        1,0,0,0,24,272,1,0,0,0,26,283,1,0,0,0,28,296,1,0,0,0,30,336,1,0,
        0,0,32,338,1,0,0,0,34,341,1,0,0,0,36,344,1,0,0,0,38,358,1,0,0,0,
        40,360,1,0,0,0,42,365,1,0,0,0,44,459,1,0,0,0,46,476,1,0,0,0,48,478,
        1,0,0,0,50,508,1,0,0,0,52,510,1,0,0,0,54,521,1,0,0,0,56,532,1,0,
        0,0,58,537,1,0,0,0,60,545,1,0,0,0,62,564,1,0,0,0,64,590,1,0,0,0,
        66,592,1,0,0,0,68,606,1,0,0,0,70,608,1,0,0,0,72,611,1,0,0,0,74,618,
        1,0,0,0,76,631,1,0,0,0,78,671,1,0,0,0,80,736,1,0,0,0,82,769,1,0,
        0,0,84,773,1,0,0,0,86,791,1,0,0,0,88,802,1,0,0,0,90,813,1,0,0,0,
        92,818,1,0,0,0,94,820,1,0,0,0,96,822,1,0,0,0,98,829,1,0,0,0,100,
        840,1,0,0,0,102,851,1,0,0,0,104,853,1,0,0,0,106,872,1,0,0,0,108,
        874,1,0,0,0,110,903,1,0,0,0,112,905,1,0,0,0,114,909,1,0,0,0,116,
        922,1,0,0,0,118,924,1,0,0,0,120,124,3,2,1,0,121,124,3,4,2,0,122,
        124,3,6,3,0,123,120,1,0,0,0,123,121,1,0,0,0,123,122,1,0,0,0,124,
        127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,
        125,1,0,0,0,128,129,5,0,0,1,129,1,1,0,0,0,130,136,5,3,0,0,131,136,
        3,42,21,0,132,133,3,10,5,0,133,134,5,3,0,0,134,136,1,0,0,0,135,130,
        1,0,0,0,135,131,1,0,0,0,135,132,1,0,0,0,136,3,1,0,0,0,137,140,5,
        3,0,0,138,140,3,8,4,0,139,137,1,0,0,0,139,138,1,0,0,0,140,141,1,
        0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,5,1,0,0,0,143,147,3,86,
        43,0,144,146,5,3,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,
        0,0,147,148,1,0,0,0,148,7,1,0,0,0,149,147,1,0,0,0,150,153,3,42,21,
        0,151,153,3,10,5,0,152,150,1,0,0,0,152,151,1,0,0,0,153,9,1,0,0,0,
        154,155,5,13,0,0,155,156,3,62,31,0,156,157,5,57,0,0,157,161,3,12,
        6,0,158,160,3,16,8,0,159,158,1,0,0,0,160,163,1,0,0,0,161,159,1,0,
        0,0,161,162,1,0,0,0,162,165,1,0,0,0,163,161,1,0,0,0,164,166,3,18,
        9,0,165,164,1,0,0,0,165,166,1,0,0,0,166,229,1,0,0,0,167,168,5,16,
        0,0,168,169,3,62,31,0,169,170,5,57,0,0,170,172,3,12,6,0,171,173,
        3,18,9,0,172,171,1,0,0,0,172,173,1,0,0,0,173,229,1,0,0,0,174,176,
        5,35,0,0,175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,178,
        5,17,0,0,178,179,3,52,26,0,179,180,5,18,0,0,180,181,3,86,43,0,181,
        182,5,57,0,0,182,184,3,12,6,0,183,185,3,18,9,0,184,183,1,0,0,0,184,
        185,1,0,0,0,185,229,1,0,0,0,186,187,5,19,0,0,187,188,5,57,0,0,188,
        201,3,12,6,0,189,191,3,24,12,0,190,189,1,0,0,0,191,192,1,0,0,0,192,
        190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,196,3,18,9,0,195,
        194,1,0,0,0,195,196,1,0,0,0,196,198,1,0,0,0,197,199,3,20,10,0,198,
        197,1,0,0,0,198,199,1,0,0,0,199,202,1,0,0,0,200,202,3,20,10,0,201,
        190,1,0,0,0,201,200,1,0,0,0,202,229,1,0,0,0,203,205,5,35,0,0,204,
        203,1,0,0,0,204,205,1,0,0,0,205,206,1,0,0,0,206,207,5,22,0,0,207,
        212,3,22,11,0,208,209,5,56,0,0,209,211,3,22,11,0,210,208,1,0,0,0,
        211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,
        214,212,1,0,0,0,215,216,5,57,0,0,216,217,3,12,6,0,217,229,1,0,0,
        0,218,220,3,14,7,0,219,218,1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,
        0,221,222,1,0,0,0,222,226,1,0,0,0,223,221,1,0,0,0,224,227,3,26,13,
        0,225,227,3,28,14,0,226,224,1,0,0,0,226,225,1,0,0,0,227,229,1,0,
        0,0,228,154,1,0,0,0,228,167,1,0,0,0,228,175,1,0,0,0,228,186,1,0,
        0,0,228,204,1,0,0,0,228,221,1,0,0,0,229,11,1,0,0,0,230,242,3,42,
        21,0,231,242,3,10,5,0,232,233,5,3,0,0,233,235,5,1,0,0,234,236,3,
        8,4,0,235,234,1,0,0,0,236,237,1,0,0,0,237,235,1,0,0,0,237,238,1,
        0,0,0,238,239,1,0,0,0,239,240,5,2,0,0,240,242,1,0,0,0,241,230,1,
        0,0,0,241,231,1,0,0,0,241,232,1,0,0,0,242,13,1,0,0,0,243,244,5,79,
        0,0,244,250,3,88,44,0,245,247,5,101,0,0,246,248,3,104,52,0,247,246,
        1,0,0,0,247,248,1,0,0,0,248,249,1,0,0,0,249,251,5,102,0,0,250,245,
        1,0,0,0,250,251,1,0,0,0,251,252,1,0,0,0,252,253,5,3,0,0,253,15,1,
        0,0,0,254,255,5,14,0,0,255,256,3,62,31,0,256,257,5,57,0,0,257,258,
        3,12,6,0,258,17,1,0,0,0,259,260,5,15,0,0,260,261,5,57,0,0,261,262,
        3,12,6,0,262,19,1,0,0,0,263,264,5,21,0,0,264,265,5,57,0,0,265,266,
        3,12,6,0,266,21,1,0,0,0,267,270,3,62,31,0,268,269,5,10,0,0,269,271,
        3,78,39,0,270,268,1,0,0,0,270,271,1,0,0,0,271,23,1,0,0,0,272,278,
        5,23,0,0,273,276,3,62,31,0,274,275,5,10,0,0,275,277,3,90,45,0,276,
        274,1,0,0,0,276,277,1,0,0,0,277,279,1,0,0,0,278,273,1,0,0,0,278,
        279,1,0,0,0,279,280,1,0,0,0,280,281,5,57,0,0,281,282,3,12,6,0,282,
        25,1,0,0,0,283,284,5,29,0,0,284,290,3,90,45,0,285,287,5,101,0,0,
        286,288,3,104,52,0,287,286,1,0,0,0,287,288,1,0,0,0,288,289,1,0,0,
        0,289,291,5,102,0,0,290,285,1,0,0,0,290,291,1,0,0,0,291,292,1,0,
        0,0,292,293,5,57,0,0,293,294,3,12,6,0,294,27,1,0,0,0,295,297,5,35,
        0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,299,5,4,
        0,0,299,300,3,90,45,0,300,302,5,101,0,0,301,303,3,30,15,0,302,301,
        1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,307,5,102,0,0,305,306,
        5,80,0,0,306,308,3,62,31,0,307,305,1,0,0,0,307,308,1,0,0,0,308,309,
        1,0,0,0,309,310,5,57,0,0,310,311,3,12,6,0,311,29,1,0,0,0,312,313,
        3,36,18,0,313,314,5,56,0,0,314,316,1,0,0,0,315,312,1,0,0,0,315,316,
        1,0,0,0,316,327,1,0,0,0,317,320,3,32,16,0,318,319,5,56,0,0,319,321,
        3,36,18,0,320,318,1,0,0,0,320,321,1,0,0,0,321,324,1,0,0,0,322,323,
        5,56,0,0,323,325,3,34,17,0,324,322,1,0,0,0,324,325,1,0,0,0,325,328,
        1,0,0,0,326,328,3,34,17,0,327,317,1,0,0,0,327,326,1,0,0,0,328,330,
        1,0,0,0,329,331,5,56,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,337,
        1,0,0,0,332,334,3,36,18,0,333,335,5,56,0,0,334,333,1,0,0,0,334,335,
        1,0,0,0,335,337,1,0,0,0,336,315,1,0,0,0,336,332,1,0,0,0,337,31,1,
        0,0,0,338,339,5,55,0,0,339,340,3,40,20,0,340,33,1,0,0,0,341,342,
        5,59,0,0,342,343,3,40,20,0,343,35,1,0,0,0,344,349,3,38,19,0,345,
        346,5,56,0,0,346,348,3,38,19,0,347,345,1,0,0,0,348,351,1,0,0,0,349,
        347,1,0,0,0,349,350,1,0,0,0,350,37,1,0,0,0,351,349,1,0,0,0,352,355,
        3,40,20,0,353,354,5,60,0,0,354,356,3,62,31,0,355,353,1,0,0,0,355,
        356,1,0,0,0,356,359,1,0,0,0,357,359,5,55,0,0,358,352,1,0,0,0,358,
        357,1,0,0,0,359,39,1,0,0,0,360,363,3,90,45,0,361,362,5,57,0,0,362,
        364,3,62,31,0,363,361,1,0,0,0,363,364,1,0,0,0,364,41,1,0,0,0,365,
        370,3,44,22,0,366,367,5,58,0,0,367,369,3,44,22,0,368,366,1,0,0,0,
        369,372,1,0,0,0,370,368,1,0,0,0,370,371,1,0,0,0,371,374,1,0,0,0,
        372,370,1,0,0,0,373,375,5,58,0,0,374,373,1,0,0,0,374,375,1,0,0,0,
        375,377,1,0,0,0,376,378,5,3,0,0,377,376,1,0,0,0,377,378,1,0,0,0,
        378,43,1,0,0,0,379,381,3,46,23,0,380,382,3,50,25,0,381,380,1,0,0,
        0,381,382,1,0,0,0,382,460,1,0,0,0,383,384,5,31,0,0,384,460,3,52,
        26,0,385,460,5,32,0,0,386,460,5,34,0,0,387,460,5,33,0,0,388,390,
        5,5,0,0,389,391,3,86,43,0,390,389,1,0,0,0,390,391,1,0,0,0,391,460,
        1,0,0,0,392,402,5,6,0,0,393,400,3,62,31,0,394,395,5,56,0,0,395,398,
        3,62,31,0,396,397,5,56,0,0,397,399,3,62,31,0,398,396,1,0,0,0,398,
        399,1,0,0,0,399,401,1,0,0,0,400,394,1,0,0,0,400,401,1,0,0,0,401,
        403,1,0,0,0,402,393,1,0,0,0,402,403,1,0,0,0,403,406,1,0,0,0,404,
        405,5,7,0,0,405,407,3,62,31,0,406,404,1,0,0,0,406,407,1,0,0,0,407,
        460,1,0,0,0,408,460,3,96,48,0,409,410,5,8,0,0,410,460,3,58,29,0,
        411,424,5,7,0,0,412,414,7,0,0,0,413,412,1,0,0,0,414,417,1,0,0,0,
        415,413,1,0,0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,415,1,0,0,0,
        418,425,3,88,44,0,419,421,7,0,0,0,420,419,1,0,0,0,421,422,1,0,0,
        0,422,420,1,0,0,0,422,423,1,0,0,0,423,425,1,0,0,0,424,415,1,0,0,
        0,424,420,1,0,0,0,425,426,1,0,0,0,426,433,5,8,0,0,427,434,5,55,0,
        0,428,429,5,101,0,0,429,430,3,54,27,0,430,431,5,102,0,0,431,434,
        1,0,0,0,432,434,3,54,27,0,433,427,1,0,0,0,433,428,1,0,0,0,433,432,
        1,0,0,0,434,460,1,0,0,0,435,436,5,11,0,0,436,441,3,90,45,0,437,438,
        5,56,0,0,438,440,3,90,45,0,439,437,1,0,0,0,440,443,1,0,0,0,441,439,
        1,0,0,0,441,442,1,0,0,0,442,460,1,0,0,0,443,441,1,0,0,0,444,445,
        5,12,0,0,445,448,3,62,31,0,446,447,5,56,0,0,447,449,3,62,31,0,448,
        446,1,0,0,0,448,449,1,0,0,0,449,460,1,0,0,0,450,451,5,9,0,0,451,
        456,3,90,45,0,452,453,5,56,0,0,453,455,3,90,45,0,454,452,1,0,0,0,
        455,458,1,0,0,0,456,454,1,0,0,0,456,457,1,0,0,0,457,460,1,0,0,0,
        458,456,1,0,0,0,459,379,1,0,0,0,459,383,1,0,0,0,459,385,1,0,0,0,
        459,386,1,0,0,0,459,387,1,0,0,0,459,388,1,0,0,0,459,392,1,0,0,0,
        459,408,1,0,0,0,459,409,1,0,0,0,459,411,1,0,0,0,459,435,1,0,0,0,
        459,444,1,0,0,0,459,450,1,0,0,0,460,45,1,0,0,0,461,464,3,62,31,0,
        462,464,3,48,24,0,463,461,1,0,0,0,463,462,1,0,0,0,464,465,1,0,0,
        0,465,466,5,56,0,0,466,468,1,0,0,0,467,463,1,0,0,0,468,469,1,0,0,
        0,469,467,1,0,0,0,469,470,1,0,0,0,470,473,1,0,0,0,471,474,3,62,31,
        0,472,474,3,48,24,0,473,471,1,0,0,0,473,472,1,0,0,0,473,474,1,0,
        0,0,474,477,1,0,0,0,475,477,3,86,43,0,476,467,1,0,0,0,476,475,1,
        0,0,0,477,47,1,0,0,0,478,479,5,55,0,0,479,480,3,78,39,0,480,49,1,
        0,0,0,481,495,5,60,0,0,482,487,3,46,23,0,483,484,5,60,0,0,484,486,
        3,46,23,0,485,483,1,0,0,0,486,489,1,0,0,0,487,485,1,0,0,0,487,488,
        1,0,0,0,488,492,1,0,0,0,489,487,1,0,0,0,490,491,5,60,0,0,491,493,
        3,96,48,0,492,490,1,0,0,0,492,493,1,0,0,0,493,496,1,0,0,0,494,496,
        3,96,48,0,495,482,1,0,0,0,495,494,1,0,0,0,496,509,1,0,0,0,497,498,
        5,57,0,0,498,501,3,62,31,0,499,500,5,60,0,0,500,502,3,86,43,0,501,
        499,1,0,0,0,501,502,1,0,0,0,502,509,1,0,0,0,503,506,7,1,0,0,504,
        507,3,96,48,0,505,507,3,86,43,0,506,504,1,0,0,0,506,505,1,0,0,0,
        507,509,1,0,0,0,508,481,1,0,0,0,508,497,1,0,0,0,508,503,1,0,0,0,
        509,51,1,0,0,0,510,515,3,78,39,0,511,512,5,56,0,0,512,514,3,78,39,
        0,513,511,1,0,0,0,514,517,1,0,0,0,515,513,1,0,0,0,515,516,1,0,0,
        0,516,519,1,0,0,0,517,515,1,0,0,0,518,520,5,56,0,0,519,518,1,0,0,
        0,519,520,1,0,0,0,520,53,1,0,0,0,521,526,3,56,28,0,522,523,5,56,
        0,0,523,525,3,56,28,0,524,522,1,0,0,0,525,528,1,0,0,0,526,524,1,
        0,0,0,526,527,1,0,0,0,527,530,1,0,0,0,528,526,1,0,0,0,529,531,5,
        56,0,0,530,529,1,0,0,0,530,531,1,0,0,0,531,55,1,0,0,0,532,535,3,
        90,45,0,533,534,5,10,0,0,534,536,3,90,45,0,535,533,1,0,0,0,535,536,
        1,0,0,0,536,57,1,0,0,0,537,542,3,60,30,0,538,539,5,56,0,0,539,541,
        3,60,30,0,540,538,1,0,0,0,541,544,1,0,0,0,542,540,1,0,0,0,542,543,
        1,0,0,0,543,59,1,0,0,0,544,542,1,0,0,0,545,548,3,88,44,0,546,547,
        5,10,0,0,547,549,3,90,45,0,548,546,1,0,0,0,548,549,1,0,0,0,549,61,
        1,0,0,0,550,556,3,74,37,0,551,552,5,13,0,0,552,553,3,74,37,0,553,
        554,5,15,0,0,554,555,3,62,31,0,555,557,1,0,0,0,556,551,1,0,0,0,556,
        557,1,0,0,0,557,565,1,0,0,0,558,560,5,24,0,0,559,561,3,64,32,0,560,
        559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,563,5,57,0,0,563,
        565,3,62,31,0,564,550,1,0,0,0,564,558,1,0,0,0,565,63,1,0,0,0,566,
        567,3,66,33,0,567,568,5,56,0,0,568,570,1,0,0,0,569,566,1,0,0,0,569,
        570,1,0,0,0,570,581,1,0,0,0,571,574,3,70,35,0,572,573,5,56,0,0,573,
        575,3,66,33,0,574,572,1,0,0,0,574,575,1,0,0,0,575,578,1,0,0,0,576,
        577,5,56,0,0,577,579,3,72,36,0,578,576,1,0,0,0,578,579,1,0,0,0,579,
        582,1,0,0,0,580,582,3,72,36,0,581,571,1,0,0,0,581,580,1,0,0,0,582,
        584,1,0,0,0,583,585,5,56,0,0,584,583,1,0,0,0,584,585,1,0,0,0,585,
        591,1,0,0,0,586,588,3,66,33,0,587,589,5,56,0,0,588,587,1,0,0,0,588,
        589,1,0,0,0,589,591,1,0,0,0,590,569,1,0,0,0,590,586,1,0,0,0,591,
        65,1,0,0,0,592,597,3,68,34,0,593,594,5,56,0,0,594,596,3,68,34,0,
        595,593,1,0,0,0,596,599,1,0,0,0,597,595,1,0,0,0,597,598,1,0,0,0,
        598,67,1,0,0,0,599,597,1,0,0,0,600,603,3,90,45,0,601,602,5,60,0,
        0,602,604,3,62,31,0,603,601,1,0,0,0,603,604,1,0,0,0,604,607,1,0,
        0,0,605,607,5,55,0,0,606,600,1,0,0,0,606,605,1,0,0,0,607,69,1,0,
        0,0,608,609,5,55,0,0,609,610,3,90,45,0,610,71,1,0,0,0,611,612,5,
        59,0,0,612,613,3,90,45,0,613,73,1,0,0,0,614,615,6,37,-1,0,615,619,
        3,76,38,0,616,617,5,27,0,0,617,619,3,74,37,3,618,614,1,0,0,0,618,
        616,1,0,0,0,619,628,1,0,0,0,620,621,10,2,0,0,621,622,5,26,0,0,622,
        627,3,74,37,3,623,624,10,1,0,0,624,625,5,25,0,0,625,627,3,74,37,
        2,626,620,1,0,0,0,626,623,1,0,0,0,627,630,1,0,0,0,628,626,1,0,0,
        0,628,629,1,0,0,0,629,75,1,0,0,0,630,628,1,0,0,0,631,632,6,38,-1,
        0,632,633,3,78,39,0,633,655,1,0,0,0,634,650,10,2,0,0,635,651,5,72,
        0,0,636,651,5,73,0,0,637,651,5,74,0,0,638,651,5,75,0,0,639,651,5,
        76,0,0,640,651,5,77,0,0,641,651,5,78,0,0,642,644,5,27,0,0,643,642,
        1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,0,645,651,5,18,0,0,646,648,
        5,28,0,0,647,649,5,27,0,0,648,647,1,0,0,0,648,649,1,0,0,0,649,651,
        1,0,0,0,650,635,1,0,0,0,650,636,1,0,0,0,650,637,1,0,0,0,650,638,
        1,0,0,0,650,639,1,0,0,0,650,640,1,0,0,0,650,641,1,0,0,0,650,643,
        1,0,0,0,650,646,1,0,0,0,651,652,1,0,0,0,652,654,3,76,38,3,653,634,
        1,0,0,0,654,657,1,0,0,0,655,653,1,0,0,0,655,656,1,0,0,0,656,77,1,
        0,0,0,657,655,1,0,0,0,658,660,6,39,-1,0,659,661,5,36,0,0,660,659,
        1,0,0,0,660,661,1,0,0,0,661,662,1,0,0,0,662,666,3,80,40,0,663,665,
        3,100,50,0,664,663,1,0,0,0,665,668,1,0,0,0,666,664,1,0,0,0,666,667,
        1,0,0,0,667,672,1,0,0,0,668,666,1,0,0,0,669,670,7,2,0,0,670,672,
        3,78,39,7,671,658,1,0,0,0,671,669,1,0,0,0,672,696,1,0,0,0,673,674,
        10,8,0,0,674,675,5,59,0,0,675,695,3,78,39,8,676,677,10,6,0,0,677,
        678,7,3,0,0,678,695,3,78,39,7,679,680,10,5,0,0,680,681,7,4,0,0,681,
        695,3,78,39,6,682,683,10,4,0,0,683,684,7,5,0,0,684,695,3,78,39,5,
        685,686,10,3,0,0,686,687,5,63,0,0,687,695,3,78,39,4,688,689,10,2,
        0,0,689,690,5,62,0,0,690,695,3,78,39,3,691,692,10,1,0,0,692,693,
        5,61,0,0,693,695,3,78,39,2,694,673,1,0,0,0,694,676,1,0,0,0,694,679,
        1,0,0,0,694,682,1,0,0,0,694,685,1,0,0,0,694,688,1,0,0,0,694,691,
        1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,696,697,1,0,0,0,697,79,1,
        0,0,0,698,696,1,0,0,0,699,702,5,101,0,0,700,703,3,96,48,0,701,703,
        3,84,42,0,702,700,1,0,0,0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,
        1,0,0,0,704,737,5,102,0,0,705,707,5,105,0,0,706,708,3,84,42,0,707,
        706,1,0,0,0,707,708,1,0,0,0,708,709,1,0,0,0,709,737,5,106,0,0,710,
        712,5,103,0,0,711,713,3,82,41,0,712,711,1,0,0,0,712,713,1,0,0,0,
        713,714,1,0,0,0,714,737,5,104,0,0,715,716,5,54,0,0,716,718,3,86,
        43,0,717,719,5,56,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,
        0,0,0,720,721,5,54,0,0,721,737,1,0,0,0,722,737,5,53,0,0,723,737,
        3,90,45,0,724,737,5,37,0,0,725,737,5,38,0,0,726,728,5,67,0,0,727,
        726,1,0,0,0,727,728,1,0,0,0,728,729,1,0,0,0,729,737,3,92,46,0,730,
        737,5,20,0,0,731,733,5,94,0,0,732,731,1,0,0,0,733,734,1,0,0,0,734,
        732,1,0,0,0,734,735,1,0,0,0,735,737,1,0,0,0,736,699,1,0,0,0,736,
        705,1,0,0,0,736,710,1,0,0,0,736,715,1,0,0,0,736,722,1,0,0,0,736,
        723,1,0,0,0,736,724,1,0,0,0,736,725,1,0,0,0,736,727,1,0,0,0,736,
        730,1,0,0,0,736,732,1,0,0,0,737,81,1,0,0,0,738,739,3,62,31,0,739,
        740,5,57,0,0,740,741,3,62,31,0,741,745,1,0,0,0,742,743,5,59,0,0,
        743,745,3,78,39,0,744,738,1,0,0,0,744,742,1,0,0,0,745,757,1,0,0,
        0,746,753,5,56,0,0,747,748,3,62,31,0,748,749,5,57,0,0,749,750,3,
        62,31,0,750,754,1,0,0,0,751,752,5,59,0,0,752,754,3,78,39,0,753,747,
        1,0,0,0,753,751,1,0,0,0,754,756,1,0,0,0,755,746,1,0,0,0,756,759,
        1,0,0,0,757,755,1,0,0,0,757,758,1,0,0,0,758,761,1,0,0,0,759,757,
        1,0,0,0,760,762,5,56,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,770,
        1,0,0,0,763,764,3,62,31,0,764,765,5,57,0,0,765,766,3,62,31,0,766,
        767,3,114,57,0,767,770,1,0,0,0,768,770,3,84,42,0,769,744,1,0,0,0,
        769,763,1,0,0,0,769,768,1,0,0,0,770,83,1,0,0,0,771,774,3,62,31,0,
        772,774,3,48,24,0,773,771,1,0,0,0,773,772,1,0,0,0,774,789,1,0,0,
        0,775,790,3,114,57,0,776,779,5,56,0,0,777,780,3,62,31,0,778,780,
        3,48,24,0,779,777,1,0,0,0,779,778,1,0,0,0,780,782,1,0,0,0,781,776,
        1,0,0,0,782,785,1,0,0,0,783,781,1,0,0,0,783,784,1,0,0,0,784,787,
        1,0,0,0,785,783,1,0,0,0,786,788,5,56,0,0,787,786,1,0,0,0,787,788,
        1,0,0,0,788,790,1,0,0,0,789,775,1,0,0,0,789,783,1,0,0,0,790,85,1,
        0,0,0,791,796,3,62,31,0,792,793,5,56,0,0,793,795,3,62,31,0,794,792,
        1,0,0,0,795,798,1,0,0,0,796,794,1,0,0,0,796,797,1,0,0,0,797,800,
        1,0,0,0,798,796,1,0,0,0,799,801,5,56,0,0,800,799,1,0,0,0,800,801,
        1,0,0,0,801,87,1,0,0,0,802,803,6,44,-1,0,803,804,3,90,45,0,804,810,
        1,0,0,0,805,806,10,2,0,0,806,807,5,52,0,0,807,809,3,90,45,0,808,
        805,1,0,0,0,809,812,1,0,0,0,810,808,1,0,0,0,810,811,1,0,0,0,811,
        89,1,0,0,0,812,810,1,0,0,0,813,814,7,6,0,0,814,91,1,0,0,0,815,819,
        3,94,47,0,816,819,5,99,0,0,817,819,5,100,0,0,818,815,1,0,0,0,818,
        816,1,0,0,0,818,817,1,0,0,0,819,93,1,0,0,0,820,821,7,7,0,0,821,95,
        1,0,0,0,822,824,5,30,0,0,823,825,3,98,49,0,824,823,1,0,0,0,824,825,
        1,0,0,0,825,97,1,0,0,0,826,827,5,7,0,0,827,830,3,62,31,0,828,830,
        3,86,43,0,829,826,1,0,0,0,829,828,1,0,0,0,830,99,1,0,0,0,831,834,
        5,52,0,0,832,835,3,90,45,0,833,835,3,118,59,0,834,832,1,0,0,0,834,
        833,1,0,0,0,835,837,1,0,0,0,836,838,3,102,51,0,837,836,1,0,0,0,837,
        838,1,0,0,0,838,841,1,0,0,0,839,841,3,102,51,0,840,831,1,0,0,0,840,
        839,1,0,0,0,841,101,1,0,0,0,842,844,5,101,0,0,843,845,3,104,52,0,
        844,843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,852,5,102,0,
        0,847,848,5,105,0,0,848,849,3,108,54,0,849,850,5,106,0,0,850,852,
        1,0,0,0,851,842,1,0,0,0,851,847,1,0,0,0,852,103,1,0,0,0,853,858,
        3,106,53,0,854,855,5,56,0,0,855,857,3,106,53,0,856,854,1,0,0,0,857,
        860,1,0,0,0,858,856,1,0,0,0,858,859,1,0,0,0,859,862,1,0,0,0,860,
        858,1,0,0,0,861,863,5,56,0,0,862,861,1,0,0,0,862,863,1,0,0,0,863,
        105,1,0,0,0,864,868,3,62,31,0,865,869,3,114,57,0,866,867,5,60,0,
        0,867,869,3,62,31,0,868,865,1,0,0,0,868,866,1,0,0,0,868,869,1,0,
        0,0,869,873,1,0,0,0,870,871,7,8,0,0,871,873,3,62,31,0,872,864,1,
        0,0,0,872,870,1,0,0,0,873,107,1,0,0,0,874,879,3,110,55,0,875,876,
        5,56,0,0,876,878,3,110,55,0,877,875,1,0,0,0,878,881,1,0,0,0,879,
        877,1,0,0,0,879,880,1,0,0,0,880,883,1,0,0,0,881,879,1,0,0,0,882,
        884,5,56,0,0,883,882,1,0,0,0,883,884,1,0,0,0,884,109,1,0,0,0,885,
        904,5,53,0,0,886,894,3,62,31,0,887,889,5,57,0,0,888,890,3,62,31,
        0,889,888,1,0,0,0,889,890,1,0,0,0,890,892,1,0,0,0,891,893,3,112,
        56,0,892,891,1,0,0,0,892,893,1,0,0,0,893,895,1,0,0,0,894,887,1,0,
        0,0,894,895,1,0,0,0,895,904,1,0,0,0,896,898,5,57,0,0,897,899,3,62,
        31,0,898,897,1,0,0,0,898,899,1,0,0,0,899,901,1,0,0,0,900,902,3,112,
        56,0,901,900,1,0,0,0,901,902,1,0,0,0,902,904,1,0,0,0,903,885,1,0,
        0,0,903,886,1,0,0,0,903,896,1,0,0,0,904,111,1,0,0,0,905,907,5,57,
        0,0,906,908,3,62,31,0,907,906,1,0,0,0,907,908,1,0,0,0,908,113,1,
        0,0,0,909,910,5,17,0,0,910,911,3,52,26,0,911,912,5,18,0,0,912,914,
        3,74,37,0,913,915,3,116,58,0,914,913,1,0,0,0,914,915,1,0,0,0,915,
        115,1,0,0,0,916,923,3,114,57,0,917,918,5,13,0,0,918,920,3,62,31,
        0,919,921,3,116,58,0,920,919,1,0,0,0,920,921,1,0,0,0,921,923,1,0,
        0,0,922,916,1,0,0,0,922,917,1,0,0,0,923,117,1,0,0,0,924,925,7,9,
        0,0,925,119,1,0,0,0,147,123,125,135,139,141,147,152,161,165,172,
        175,184,192,195,198,201,204,212,221,226,228,237,241,247,250,270,
        276,278,287,290,296,302,307,315,320,324,327,330,334,336,349,355,
        358,363,370,374,377,381,390,398,400,402,406,415,422,424,433,441,
        448,456,459,463,469,473,476,487,492,495,501,506,508,515,519,526,
        530,535,542,548,556,560,564,569,574,578,581,584,588,590,597,603,
        606,618,626,628,643,648,650,655,660,666,671,694,696,702,707,712,
        718,727,734,736,744,753,757,761,769,773,779,783,787,789,796,800,
        810,818,824,829,834,837,840,844,851,858,862,868,872,879,883,889,
        892,894,898,901,903,907,914,920,922
    ]

class PythonParser ( PythonParserBase ):

    grammarFileName = "PythonParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'def'", "'return'", "'raise'", "'from'", "'import'", 
                     "'nonlocal'", "'as'", "'global'", "'assert'", "'if'", 
                     "'elif'", "'else'", "'while'", "'for'", "'in'", "'try'", 
                     "'None'", "'finally'", "'with'", "'except'", "'lambda'", 
                     "'or'", "'and'", "'not'", "'is'", "'class'", "'yield'", 
                     "'del'", "'pass'", "'continue'", "'break'", "'async'", 
                     "'await'", "'print'", "'exec'", "'True'", "'False'", 
                     "'ch'", "'cx'", "'cz'", "'h'", "'measure'", "'swap'", 
                     "'s'", "'t'", "'x'", "'y'", "'z'", "'.'", "'...'", 
                     "'`'", "'*'", "','", "':'", "';'", "'**'", "'='", "'|'", 
                     "'^'", "'&'", "'<<'", "'>>'", "'+'", "'-'", "'/'", 
                     "'%'", "'//'", "'~'", "'<'", "'>'", "'=='", "'>='", 
                     "'<='", "'<>'", "'!='", "'@'", "'->'", "'+='", "'-='", 
                     "'*='", "'@='", "'/='", "'%='", "'&='", "'|='", "'^='", 
                     "'<<='", "'>>='", "'**='", "'//='", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "'['", "']'" ]

    symbolicNames = [ "<INVALID>", "INDENT", "DEDENT", "LINE_BREAK", "DEF", 
                      "RETURN", "RAISE", "FROM", "IMPORT", "NONLOCAL", "AS", 
                      "GLOBAL", "ASSERT", "IF", "ELIF", "ELSE", "WHILE", 
                      "FOR", "IN", "TRY", "NONE", "FINALLY", "WITH", "EXCEPT", 
                      "LAMBDA", "OR", "AND", "NOT", "IS", "CLASS", "YIELD", 
                      "DEL", "PASS", "CONTINUE", "BREAK", "ASYNC", "AWAIT", 
                      "PRINT", "EXEC", "TRUE", "FALSE", "CONTROLLEDH", "CONTROLLEDX", 
                      "CONTROLLEDZ", "HADAMARD", "MEASURE", "SWAP", "S", 
                      "T", "X", "Y", "Z", "DOT", "ELLIPSIS", "REVERSE_QUOTE", 
                      "STAR", "COMMA", "COLON", "SEMI_COLON", "POWER", "ASSIGN", 
                      "OR_OP", "XOR", "AND_OP", "LEFT_SHIFT", "RIGHT_SHIFT", 
                      "ADD", "MINUS", "DIV", "MOD", "IDIV", "NOT_OP", "LESS_THAN", 
                      "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", 
                      "NOT_EQ_2", "AT", "ARROW", "ADD_ASSIGN", "SUB_ASSIGN", 
                      "MULT_ASSIGN", "AT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", 
                      "AND_ASSIGN", "OR_ASSIGN", "XOR_ASSIGN", "LEFT_SHIFT_ASSIGN", 
                      "RIGHT_SHIFT_ASSIGN", "POWER_ASSIGN", "IDIV_ASSIGN", 
                      "STRING", "DECIMAL_INTEGER", "OCT_INTEGER", "HEX_INTEGER", 
                      "BIN_INTEGER", "IMAG_NUMBER", "FLOAT_NUMBER", "OPEN_PAREN", 
                      "CLOSE_PAREN", "OPEN_BRACE", "CLOSE_BRACE", "OPEN_BRACKET", 
                      "CLOSE_BRACKET", "NAME", "LINE_JOIN", "NEWLINE", "WS", 
                      "COMMENT" ]

    RULE_root = 0
    RULE_single_input = 1
    RULE_file_input = 2
    RULE_eval_input = 3
    RULE_stmt = 4
    RULE_compound_stmt = 5
    RULE_suite = 6
    RULE_decorator = 7
    RULE_elif_clause = 8
    RULE_else_clause = 9
    RULE_finally_clause = 10
    RULE_with_item = 11
    RULE_except_clause = 12
    RULE_classdef = 13
    RULE_funcdef = 14
    RULE_typedargslist = 15
    RULE_args = 16
    RULE_kwargs = 17
    RULE_def_parameters = 18
    RULE_def_parameter = 19
    RULE_named_parameter = 20
    RULE_simple_stmt = 21
    RULE_small_stmt = 22
    RULE_testlist_star_expr = 23
    RULE_star_expr = 24
    RULE_assign_part = 25
    RULE_exprlist = 26
    RULE_import_as_names = 27
    RULE_import_as_name = 28
    RULE_dotted_as_names = 29
    RULE_dotted_as_name = 30
    RULE_test = 31
    RULE_varargslist = 32
    RULE_vardef_parameters = 33
    RULE_vardef_parameter = 34
    RULE_varargs = 35
    RULE_varkwargs = 36
    RULE_logical_test = 37
    RULE_comparison = 38
    RULE_expr = 39
    RULE_atom = 40
    RULE_dictorsetmaker = 41
    RULE_testlist_comp = 42
    RULE_testlist = 43
    RULE_dotted_name = 44
    RULE_name = 45
    RULE_number = 46
    RULE_integer = 47
    RULE_yield_expr = 48
    RULE_yield_arg = 49
    RULE_trailer = 50
    RULE_arguments = 51
    RULE_arglist = 52
    RULE_argument = 53
    RULE_subscriptlist = 54
    RULE_subscript = 55
    RULE_sliceop = 56
    RULE_comp_for = 57
    RULE_comp_iter = 58
    RULE_quantum_gates_definition = 59

    ruleNames =  [ "root", "single_input", "file_input", "eval_input", "stmt", 
                   "compound_stmt", "suite", "decorator", "elif_clause", 
                   "else_clause", "finally_clause", "with_item", "except_clause", 
                   "classdef", "funcdef", "typedargslist", "args", "kwargs", 
                   "def_parameters", "def_parameter", "named_parameter", 
                   "simple_stmt", "small_stmt", "testlist_star_expr", "star_expr", 
                   "assign_part", "exprlist", "import_as_names", "import_as_name", 
                   "dotted_as_names", "dotted_as_name", "test", "varargslist", 
                   "vardef_parameters", "vardef_parameter", "varargs", "varkwargs", 
                   "logical_test", "comparison", "expr", "atom", "dictorsetmaker", 
                   "testlist_comp", "testlist", "dotted_name", "name", "number", 
                   "integer", "yield_expr", "yield_arg", "trailer", "arguments", 
                   "arglist", "argument", "subscriptlist", "subscript", 
                   "sliceop", "comp_for", "comp_iter", "quantum_gates_definition" ]

    EOF = Token.EOF
    INDENT=1
    DEDENT=2
    LINE_BREAK=3
    DEF=4
    RETURN=5
    RAISE=6
    FROM=7
    IMPORT=8
    NONLOCAL=9
    AS=10
    GLOBAL=11
    ASSERT=12
    IF=13
    ELIF=14
    ELSE=15
    WHILE=16
    FOR=17
    IN=18
    TRY=19
    NONE=20
    FINALLY=21
    WITH=22
    EXCEPT=23
    LAMBDA=24
    OR=25
    AND=26
    NOT=27
    IS=28
    CLASS=29
    YIELD=30
    DEL=31
    PASS=32
    CONTINUE=33
    BREAK=34
    ASYNC=35
    AWAIT=36
    PRINT=37
    EXEC=38
    TRUE=39
    FALSE=40
    CONTROLLEDH=41
    CONTROLLEDX=42
    CONTROLLEDZ=43
    HADAMARD=44
    MEASURE=45
    SWAP=46
    S=47
    T=48
    X=49
    Y=50
    Z=51
    DOT=52
    ELLIPSIS=53
    REVERSE_QUOTE=54
    STAR=55
    COMMA=56
    COLON=57
    SEMI_COLON=58
    POWER=59
    ASSIGN=60
    OR_OP=61
    XOR=62
    AND_OP=63
    LEFT_SHIFT=64
    RIGHT_SHIFT=65
    ADD=66
    MINUS=67
    DIV=68
    MOD=69
    IDIV=70
    NOT_OP=71
    LESS_THAN=72
    GREATER_THAN=73
    EQUALS=74
    GT_EQ=75
    LT_EQ=76
    NOT_EQ_1=77
    NOT_EQ_2=78
    AT=79
    ARROW=80
    ADD_ASSIGN=81
    SUB_ASSIGN=82
    MULT_ASSIGN=83
    AT_ASSIGN=84
    DIV_ASSIGN=85
    MOD_ASSIGN=86
    AND_ASSIGN=87
    OR_ASSIGN=88
    XOR_ASSIGN=89
    LEFT_SHIFT_ASSIGN=90
    RIGHT_SHIFT_ASSIGN=91
    POWER_ASSIGN=92
    IDIV_ASSIGN=93
    STRING=94
    DECIMAL_INTEGER=95
    OCT_INTEGER=96
    HEX_INTEGER=97
    BIN_INTEGER=98
    IMAG_NUMBER=99
    FLOAT_NUMBER=100
    OPEN_PAREN=101
    CLOSE_PAREN=102
    OPEN_BRACE=103
    CLOSE_BRACE=104
    OPEN_BRACKET=105
    CLOSE_BRACKET=106
    NAME=107
    LINE_JOIN=108
    NEWLINE=109
    WS=110
    COMMENT=111

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(PythonParser.EOF, 0)

        def single_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Single_inputContext)
            else:
                return self.getTypedRuleContext(PythonParser.Single_inputContext,i)


        def file_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.File_inputContext)
            else:
                return self.getTypedRuleContext(PythonParser.File_inputContext,i)


        def eval_input(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Eval_inputContext)
            else:
                return self.getTypedRuleContext(PythonParser.Eval_inputContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRoot" ):
                return visitor.visitRoot(self)
            else:
                return visitor.visitChildren(self)




    def root(self):

        localctx = PythonParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 63052593426545656) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669072419) != 0):
                self.state = 123
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 120
                    self.single_input()
                    pass

                elif la_ == 2:
                    self.state = 121
                    self.file_input()
                    pass

                elif la_ == 3:
                    self.state = 122
                    self.eval_input()
                    pass


                self.state = 127
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 128
            self.match(PythonParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Single_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_single_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingle_input" ):
                listener.enterSingle_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingle_input" ):
                listener.exitSingle_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSingle_input" ):
                return visitor.visitSingle_input(self)
            else:
                return visitor.visitChildren(self)




    def single_input(self):

        localctx = PythonParser.Single_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_single_input)
        try:
            self.state = 135
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [3]:
                self.enterOuterAlt(localctx, 1)
                self.state = 130
                self.match(PythonParser.LINE_BREAK)
                pass
            elif token in [5, 6, 7, 8, 9, 11, 12, 20, 24, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 131
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 22, 29, 35, 79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 132
                self.compound_stmt()
                self.state = 133
                self.match(PythonParser.LINE_BREAK)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class File_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_file_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFile_input" ):
                listener.enterFile_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFile_input" ):
                listener.exitFile_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFile_input" ):
                return visitor.visitFile_input(self)
            else:
                return visitor.visitChildren(self)




    def file_input(self):

        localctx = PythonParser.File_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_file_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 139 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 139
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [3]:
                        self.state = 137
                        self.match(PythonParser.LINE_BREAK)
                        pass
                    elif token in [4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 19, 20, 22, 24, 27, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 79, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                        self.state = 138
                        self.stmt()
                        pass
                    else:
                        raise NoViableAltException(self)


                else:
                    raise NoViableAltException(self)
                self.state = 141 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Eval_inputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def LINE_BREAK(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.LINE_BREAK)
            else:
                return self.getToken(PythonParser.LINE_BREAK, i)

        def getRuleIndex(self):
            return PythonParser.RULE_eval_input

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEval_input" ):
                listener.enterEval_input(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEval_input" ):
                listener.exitEval_input(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEval_input" ):
                return visitor.visitEval_input(self)
            else:
                return visitor.visitChildren(self)




    def eval_input(self):

        localctx = PythonParser.Eval_inputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_eval_input)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self.testlist()
            self.state = 147
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 144
                    self.match(PythonParser.LINE_BREAK) 
                self.state = 149
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStmt" ):
                listener.enterStmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStmt" ):
                listener.exitStmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStmt" ):
                return visitor.visitStmt(self)
            else:
                return visitor.visitChildren(self)




    def stmt(self):

        localctx = PythonParser.StmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_stmt)
        try:
            self.state = 152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 20, 24, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 150
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 22, 29, 35, 79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 151
                self.compound_stmt()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Compound_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonParser.RULE_compound_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class While_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WHILE(self):
            return self.getToken(PythonParser.WHILE, 0)
        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhile_stmt" ):
                listener.enterWhile_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhile_stmt" ):
                listener.exitWhile_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhile_stmt" ):
                return visitor.visitWhile_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Try_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRY(self):
            return self.getToken(PythonParser.TRY, 0)
        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def finally_clause(self):
            return self.getTypedRuleContext(PythonParser.Finally_clauseContext,0)

        def except_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Except_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.Except_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTry_stmt" ):
                listener.enterTry_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTry_stmt" ):
                listener.exitTry_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTry_stmt" ):
                return visitor.visitTry_stmt(self)
            else:
                return visitor.visitChildren(self)


    class If_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.cond = None # TestContext
            self.copyFrom(ctx)

        def IF(self):
            return self.getToken(PythonParser.IF, 0)
        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)

        def elif_clause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Elif_clauseContext)
            else:
                return self.getTypedRuleContext(PythonParser.Elif_clauseContext,i)

        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIf_stmt" ):
                listener.enterIf_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIf_stmt" ):
                listener.exitIf_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf_stmt" ):
                return visitor.visitIf_stmt(self)
            else:
                return visitor.visitChildren(self)


    class With_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def WITH(self):
            return self.getToken(PythonParser.WITH, 0)
        def with_item(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.With_itemContext)
            else:
                return self.getTypedRuleContext(PythonParser.With_itemContext,i)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_stmt" ):
                listener.enterWith_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_stmt" ):
                listener.exitWith_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_stmt" ):
                return visitor.visitWith_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Class_or_func_def_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def classdef(self):
            return self.getTypedRuleContext(PythonParser.ClassdefContext,0)

        def funcdef(self):
            return self.getTypedRuleContext(PythonParser.FuncdefContext,0)

        def decorator(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.DecoratorContext)
            else:
                return self.getTypedRuleContext(PythonParser.DecoratorContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_or_func_def_stmt" ):
                listener.enterClass_or_func_def_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_or_func_def_stmt" ):
                listener.exitClass_or_func_def_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClass_or_func_def_stmt" ):
                return visitor.visitClass_or_func_def_stmt(self)
            else:
                return visitor.visitChildren(self)


    class For_stmtContext(Compound_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Compound_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)
        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)
        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)
        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)

        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)
        def else_clause(self):
            return self.getTypedRuleContext(PythonParser.Else_clauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFor_stmt" ):
                listener.enterFor_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFor_stmt" ):
                listener.exitFor_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFor_stmt" ):
                return visitor.visitFor_stmt(self)
            else:
                return visitor.visitChildren(self)



    def compound_stmt(self):

        localctx = PythonParser.Compound_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_compound_stmt)
        self._la = 0 # Token type
        try:
            self.state = 228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                localctx = PythonParser.If_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 154
                self.match(PythonParser.IF)
                self.state = 155
                localctx.cond = self.test()
                self.state = 156
                self.match(PythonParser.COLON)
                self.state = 157
                self.suite()
                self.state = 161
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 158
                        self.elif_clause() 
                    self.state = 163
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 165
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                if la_ == 1:
                    self.state = 164
                    self.else_clause()


                pass

            elif la_ == 2:
                localctx = PythonParser.While_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 167
                self.match(PythonParser.WHILE)
                self.state = 168
                self.test()
                self.state = 169
                self.match(PythonParser.COLON)
                self.state = 170
                self.suite()
                self.state = 172
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
                if la_ == 1:
                    self.state = 171
                    self.else_clause()


                pass

            elif la_ == 3:
                localctx = PythonParser.For_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 174
                    self.match(PythonParser.ASYNC)


                self.state = 177
                self.match(PythonParser.FOR)
                self.state = 178
                self.exprlist()
                self.state = 179
                self.match(PythonParser.IN)
                self.state = 180
                self.testlist()
                self.state = 181
                self.match(PythonParser.COLON)
                self.state = 182
                self.suite()
                self.state = 184
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                if la_ == 1:
                    self.state = 183
                    self.else_clause()


                pass

            elif la_ == 4:
                localctx = PythonParser.Try_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 186
                self.match(PythonParser.TRY)
                self.state = 187
                self.match(PythonParser.COLON)
                self.state = 188
                self.suite()
                self.state = 201
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [23]:
                    self.state = 190 
                    self._errHandler.sync(self)
                    _alt = 1
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt == 1:
                            self.state = 189
                            self.except_clause()

                        else:
                            raise NoViableAltException(self)
                        self.state = 192 
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

                    self.state = 195
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        self.state = 194
                        self.else_clause()


                    self.state = 198
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 197
                        self.finally_clause()


                    pass
                elif token in [21]:
                    self.state = 200
                    self.finally_clause()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 5:
                localctx = PythonParser.With_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==35:
                    self.state = 203
                    self.match(PythonParser.ASYNC)


                self.state = 206
                self.match(PythonParser.WITH)
                self.state = 207
                self.with_item()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 208
                    self.match(PythonParser.COMMA)
                    self.state = 209
                    self.with_item()
                    self.state = 214
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 215
                self.match(PythonParser.COLON)
                self.state = 216
                self.suite()
                pass

            elif la_ == 6:
                localctx = PythonParser.Class_or_func_def_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==79:
                    self.state = 218
                    self.decorator()
                    self.state = 223
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [29]:
                    self.state = 224
                    self.classdef()
                    pass
                elif token in [4, 35]:
                    self.state = 225
                    self.funcdef()
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SuiteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simple_stmt(self):
            return self.getTypedRuleContext(PythonParser.Simple_stmtContext,0)


        def compound_stmt(self):
            return self.getTypedRuleContext(PythonParser.Compound_stmtContext,0)


        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def INDENT(self):
            return self.getToken(PythonParser.INDENT, 0)

        def DEDENT(self):
            return self.getToken(PythonParser.DEDENT, 0)

        def stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.StmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.StmtContext,i)


        def getRuleIndex(self):
            return PythonParser.RULE_suite

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSuite" ):
                listener.enterSuite(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSuite" ):
                listener.exitSuite(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSuite" ):
                return visitor.visitSuite(self)
            else:
                return visitor.visitChildren(self)




    def suite(self):

        localctx = PythonParser.SuiteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_suite)
        self._la = 0 # Token type
        try:
            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5, 6, 7, 8, 9, 11, 12, 20, 24, 27, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                self.simple_stmt()
                pass
            elif token in [4, 13, 16, 17, 19, 22, 29, 35, 79]:
                self.enterOuterAlt(localctx, 2)
                self.state = 231
                self.compound_stmt()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 3)
                self.state = 232
                self.match(PythonParser.LINE_BREAK)
                self.state = 233
                self.match(PythonParser.INDENT)
                self.state = 235 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 234
                    self.stmt()
                    self.state = 237 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & 63052593426545648) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669072419) != 0)):
                        break

                self.state = 239
                self.match(PythonParser.DEDENT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecoratorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_decorator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecorator" ):
                listener.enterDecorator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecorator" ):
                listener.exitDecorator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecorator" ):
                return visitor.visitDecorator(self)
            else:
                return visitor.visitChildren(self)




    def decorator(self):

        localctx = PythonParser.DecoratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_decorator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(PythonParser.AT)
            self.state = 244
            self.dotted_name(0)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 245
                self.match(PythonParser.OPEN_PAREN)
                self.state = 247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 639513277542432768) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 246
                    self.arglist()


                self.state = 249
                self.match(PythonParser.CLOSE_PAREN)


            self.state = 252
            self.match(PythonParser.LINE_BREAK)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Elif_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELIF(self):
            return self.getToken(PythonParser.ELIF, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_elif_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElif_clause" ):
                listener.enterElif_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElif_clause" ):
                listener.exitElif_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElif_clause" ):
                return visitor.visitElif_clause(self)
            else:
                return visitor.visitChildren(self)




    def elif_clause(self):

        localctx = PythonParser.Elif_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_elif_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(PythonParser.ELIF)
            self.state = 255
            self.test()
            self.state = 256
            self.match(PythonParser.COLON)
            self.state = 257
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Else_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_else_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElse_clause" ):
                listener.enterElse_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElse_clause" ):
                listener.exitElse_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElse_clause" ):
                return visitor.visitElse_clause(self)
            else:
                return visitor.visitChildren(self)




    def else_clause(self):

        localctx = PythonParser.Else_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_else_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(PythonParser.ELSE)
            self.state = 260
            self.match(PythonParser.COLON)
            self.state = 261
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Finally_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FINALLY(self):
            return self.getToken(PythonParser.FINALLY, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_finally_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFinally_clause" ):
                listener.enterFinally_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFinally_clause" ):
                listener.exitFinally_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFinally_clause" ):
                return visitor.visitFinally_clause(self)
            else:
                return visitor.visitChildren(self)




    def finally_clause(self):

        localctx = PythonParser.Finally_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_finally_clause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(PythonParser.FINALLY)
            self.state = 264
            self.match(PythonParser.COLON)
            self.state = 265
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class With_itemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_with_item

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWith_item" ):
                listener.enterWith_item(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWith_item" ):
                listener.exitWith_item(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWith_item" ):
                return visitor.visitWith_item(self)
            else:
                return visitor.visitChildren(self)




    def with_item(self):

        localctx = PythonParser.With_itemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_with_item)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.test()
            self.state = 270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 268
                self.match(PythonParser.AS)
                self.state = 269
                self.expr(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Except_clauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCEPT(self):
            return self.getToken(PythonParser.EXCEPT, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_except_clause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExcept_clause" ):
                listener.enterExcept_clause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExcept_clause" ):
                listener.exitExcept_clause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExcept_clause" ):
                return visitor.visitExcept_clause(self)
            else:
                return visitor.visitChildren(self)




    def except_clause(self):

        localctx = PythonParser.Except_clauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_except_clause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(PythonParser.EXCEPT)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27023728220045312) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                self.state = 273
                self.test()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==10:
                    self.state = 274
                    self.match(PythonParser.AS)
                    self.state = 275
                    self.name()




            self.state = 280
            self.match(PythonParser.COLON)
            self.state = 281
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS(self):
            return self.getToken(PythonParser.CLASS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_classdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassdef" ):
                listener.enterClassdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassdef" ):
                listener.exitClassdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassdef" ):
                return visitor.visitClassdef(self)
            else:
                return visitor.visitChildren(self)




    def classdef(self):

        localctx = PythonParser.ClassdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_classdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(PythonParser.CLASS)
            self.state = 284
            self.name()
            self.state = 290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==101:
                self.state = 285
                self.match(PythonParser.OPEN_PAREN)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 639513277542432768) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 286
                    self.arglist()


                self.state = 289
                self.match(PythonParser.CLOSE_PAREN)


            self.state = 292
            self.match(PythonParser.COLON)
            self.state = 293
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FuncdefContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEF(self):
            return self.getToken(PythonParser.DEF, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def suite(self):
            return self.getTypedRuleContext(PythonParser.SuiteContext,0)


        def ASYNC(self):
            return self.getToken(PythonParser.ASYNC, 0)

        def typedargslist(self):
            return self.getTypedRuleContext(PythonParser.TypedargslistContext,0)


        def ARROW(self):
            return self.getToken(PythonParser.ARROW, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_funcdef

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFuncdef" ):
                listener.enterFuncdef(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFuncdef" ):
                listener.exitFuncdef(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFuncdef" ):
                return visitor.visitFuncdef(self)
            else:
                return visitor.visitChildren(self)




    def funcdef(self):

        localctx = PythonParser.FuncdefContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_funcdef)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35:
                self.state = 295
                self.match(PythonParser.ASYNC)


            self.state = 298
            self.match(PythonParser.DEF)
            self.state = 299
            self.name()
            self.state = 300
            self.match(PythonParser.OPEN_PAREN)
            self.state = 302
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612491198589829120) != 0) or _la==107:
                self.state = 301
                self.typedargslist()


            self.state = 304
            self.match(PythonParser.CLOSE_PAREN)
            self.state = 307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80:
                self.state = 305
                self.match(PythonParser.ARROW)
                self.state = 306
                self.test()


            self.state = 309
            self.match(PythonParser.COLON)
            self.state = 310
            self.suite()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def args(self):
            return self.getTypedRuleContext(PythonParser.ArgsContext,0)


        def kwargs(self):
            return self.getTypedRuleContext(PythonParser.KwargsContext,0)


        def def_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Def_parametersContext)
            else:
                return self.getTypedRuleContext(PythonParser.Def_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_typedargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedargslist" ):
                listener.enterTypedargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedargslist" ):
                listener.exitTypedargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedargslist" ):
                return visitor.visitTypedargslist(self)
            else:
                return visitor.visitChildren(self)




    def typedargslist(self):

        localctx = PythonParser.TypedargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_typedargslist)
        self._la = 0 # Token type
        try:
            self.state = 336
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 315
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
                if la_ == 1:
                    self.state = 312
                    self.def_parameters()
                    self.state = 313
                    self.match(PythonParser.COMMA)


                self.state = 327
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 317
                    self.args()
                    self.state = 320
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                    if la_ == 1:
                        self.state = 318
                        self.match(PythonParser.COMMA)
                        self.state = 319
                        self.def_parameters()


                    self.state = 324
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                    if la_ == 1:
                        self.state = 322
                        self.match(PythonParser.COMMA)
                        self.state = 323
                        self.kwargs()


                    pass
                elif token in [59]:
                    self.state = 326
                    self.kwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 329
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 332
                self.def_parameters()
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 333
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_args

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgs" ):
                listener.enterArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgs" ):
                listener.exitArgs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgs" ):
                return visitor.visitArgs(self)
            else:
                return visitor.visitChildren(self)




    def args(self):

        localctx = PythonParser.ArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_args)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 338
            self.match(PythonParser.STAR)
            self.state = 339
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_kwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKwargs" ):
                listener.enterKwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKwargs" ):
                listener.exitKwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitKwargs" ):
                return visitor.visitKwargs(self)
            else:
                return visitor.visitChildren(self)




    def kwargs(self):

        localctx = PythonParser.KwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_kwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 341
            self.match(PythonParser.POWER)
            self.state = 342
            self.named_parameter()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def def_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Def_parameterContext)
            else:
                return self.getTypedRuleContext(PythonParser.Def_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_def_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameters" ):
                listener.enterDef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameters" ):
                listener.exitDef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameters" ):
                return visitor.visitDef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def def_parameters(self):

        localctx = PythonParser.Def_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_def_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 344
            self.def_parameter()
            self.state = 349
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,40,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 345
                    self.match(PythonParser.COMMA)
                    self.state = 346
                    self.def_parameter() 
                self.state = 351
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,40,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Def_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def named_parameter(self):
            return self.getTypedRuleContext(PythonParser.Named_parameterContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_def_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDef_parameter" ):
                listener.enterDef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDef_parameter" ):
                listener.exitDef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDef_parameter" ):
                return visitor.visitDef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def def_parameter(self):

        localctx = PythonParser.Def_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_def_parameter)
        self._la = 0 # Token type
        try:
            self.state = 358
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 352
                self.named_parameter()
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 353
                    self.match(PythonParser.ASSIGN)
                    self.state = 354
                    self.test()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 357
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Named_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_named_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamed_parameter" ):
                listener.enterNamed_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamed_parameter" ):
                listener.exitNamed_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamed_parameter" ):
                return visitor.visitNamed_parameter(self)
            else:
                return visitor.visitChildren(self)




    def named_parameter(self):

        localctx = PythonParser.Named_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_named_parameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.name()
            self.state = 363
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==57:
                self.state = 361
                self.match(PythonParser.COLON)
                self.state = 362
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Simple_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def small_stmt(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Small_stmtContext)
            else:
                return self.getTypedRuleContext(PythonParser.Small_stmtContext,i)


        def SEMI_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.SEMI_COLON)
            else:
                return self.getToken(PythonParser.SEMI_COLON, i)

        def LINE_BREAK(self):
            return self.getToken(PythonParser.LINE_BREAK, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_simple_stmt

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimple_stmt" ):
                listener.enterSimple_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimple_stmt" ):
                listener.exitSimple_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimple_stmt" ):
                return visitor.visitSimple_stmt(self)
            else:
                return visitor.visitChildren(self)




    def simple_stmt(self):

        localctx = PythonParser.Simple_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_simple_stmt)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 365
            self.small_stmt()
            self.state = 370
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,44,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 366
                    self.match(PythonParser.SEMI_COLON)
                    self.state = 367
                    self.small_stmt() 
                self.state = 372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,44,self._ctx)

            self.state = 374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 373
                self.match(PythonParser.SEMI_COLON)


            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.state = 376
                self.match(PythonParser.LINE_BREAK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Small_stmtContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return PythonParser.RULE_small_stmt

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class Assert_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ASSERT(self):
            return self.getToken(PythonParser.ASSERT, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssert_stmt" ):
                listener.enterAssert_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssert_stmt" ):
                listener.exitAssert_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert_stmt" ):
                return visitor.visitAssert_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Nonlocal_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NONLOCAL(self):
            return self.getToken(PythonParser.NONLOCAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonlocal_stmt" ):
                listener.enterNonlocal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonlocal_stmt" ):
                listener.exitNonlocal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNonlocal_stmt" ):
                return visitor.visitNonlocal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Pass_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASS(self):
            return self.getToken(PythonParser.PASS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPass_stmt" ):
                listener.enterPass_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPass_stmt" ):
                listener.exitPass_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPass_stmt" ):
                return visitor.visitPass_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Import_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)
        def dotted_as_names(self):
            return self.getTypedRuleContext(PythonParser.Dotted_as_namesContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_stmt" ):
                listener.enterImport_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_stmt" ):
                listener.exitImport_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_stmt" ):
                return visitor.visitImport_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Expr_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def testlist_star_expr(self):
            return self.getTypedRuleContext(PythonParser.Testlist_star_exprContext,0)

        def assign_part(self):
            return self.getTypedRuleContext(PythonParser.Assign_partContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr_stmt" ):
                listener.enterExpr_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr_stmt" ):
                listener.exitExpr_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr_stmt" ):
                return visitor.visitExpr_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Raise_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RAISE(self):
            return self.getToken(PythonParser.RAISE, 0)
        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRaise_stmt" ):
                listener.enterRaise_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRaise_stmt" ):
                listener.exitRaise_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRaise_stmt" ):
                return visitor.visitRaise_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Yield_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_stmt" ):
                listener.enterYield_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_stmt" ):
                listener.exitYield_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_stmt" ):
                return visitor.visitYield_stmt(self)
            else:
                return visitor.visitChildren(self)


    class From_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)
        def IMPORT(self):
            return self.getToken(PythonParser.IMPORT, 0)
        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)
        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)
        def import_as_names(self):
            return self.getTypedRuleContext(PythonParser.Import_as_namesContext,0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)
        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.DOT)
            else:
                return self.getToken(PythonParser.DOT, i)
        def ELLIPSIS(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ELLIPSIS)
            else:
                return self.getToken(PythonParser.ELLIPSIS, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrom_stmt" ):
                listener.enterFrom_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrom_stmt" ):
                listener.exitFrom_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFrom_stmt" ):
                return visitor.visitFrom_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Global_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def GLOBAL(self):
            return self.getToken(PythonParser.GLOBAL, 0)
        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobal_stmt" ):
                listener.enterGlobal_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobal_stmt" ):
                listener.exitGlobal_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitGlobal_stmt" ):
                return visitor.visitGlobal_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Continue_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTINUE(self):
            return self.getToken(PythonParser.CONTINUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterContinue_stmt" ):
                listener.enterContinue_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitContinue_stmt" ):
                listener.exitContinue_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitContinue_stmt" ):
                return visitor.visitContinue_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Break_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BREAK(self):
            return self.getToken(PythonParser.BREAK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBreak_stmt" ):
                listener.enterBreak_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBreak_stmt" ):
                listener.exitBreak_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBreak_stmt" ):
                return visitor.visitBreak_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Del_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEL(self):
            return self.getToken(PythonParser.DEL, 0)
        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDel_stmt" ):
                listener.enterDel_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDel_stmt" ):
                listener.exitDel_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDel_stmt" ):
                return visitor.visitDel_stmt(self)
            else:
                return visitor.visitChildren(self)


    class Return_stmtContext(Small_stmtContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a PythonParser.Small_stmtContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RETURN(self):
            return self.getToken(PythonParser.RETURN, 0)
        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturn_stmt" ):
                listener.enterReturn_stmt(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturn_stmt" ):
                listener.exitReturn_stmt(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitReturn_stmt" ):
                return visitor.visitReturn_stmt(self)
            else:
                return visitor.visitChildren(self)



    def small_stmt(self):

        localctx = PythonParser.Small_stmtContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_small_stmt)
        self._la = 0 # Token type
        try:
            self.state = 459
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                localctx = PythonParser.Expr_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 379
                self.testlist_star_expr()
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 57)) & ~0x3f) == 0 and ((1 << (_la - 57)) & 137422176265) != 0):
                    self.state = 380
                    self.assign_part()


                pass
            elif token in [31]:
                localctx = PythonParser.Del_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 383
                self.match(PythonParser.DEL)
                self.state = 384
                self.exprlist()
                pass
            elif token in [32]:
                localctx = PythonParser.Pass_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 385
                self.match(PythonParser.PASS)
                pass
            elif token in [34]:
                localctx = PythonParser.Break_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 386
                self.match(PythonParser.BREAK)
                pass
            elif token in [33]:
                localctx = PythonParser.Continue_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 387
                self.match(PythonParser.CONTINUE)
                pass
            elif token in [5]:
                localctx = PythonParser.Return_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 388
                self.match(PythonParser.RETURN)
                self.state = 390
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
                if la_ == 1:
                    self.state = 389
                    self.testlist()


                pass
            elif token in [6]:
                localctx = PythonParser.Raise_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 392
                self.match(PythonParser.RAISE)
                self.state = 402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
                if la_ == 1:
                    self.state = 393
                    self.test()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==56:
                        self.state = 394
                        self.match(PythonParser.COMMA)
                        self.state = 395
                        self.test()
                        self.state = 398
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==56:
                            self.state = 396
                            self.match(PythonParser.COMMA)
                            self.state = 397
                            self.test()






                self.state = 406
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
                if la_ == 1:
                    self.state = 404
                    self.match(PythonParser.FROM)
                    self.state = 405
                    self.test()


                pass
            elif token in [30]:
                localctx = PythonParser.Yield_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 408
                self.yield_expr()
                pass
            elif token in [8]:
                localctx = PythonParser.Import_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 409
                self.match(PythonParser.IMPORT)
                self.state = 410
                self.dotted_as_names()
                pass
            elif token in [7]:
                localctx = PythonParser.From_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 411
                self.match(PythonParser.FROM)
                self.state = 424
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
                if la_ == 1:
                    self.state = 415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==52 or _la==53:
                        self.state = 412
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==53):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 417
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 418
                    self.dotted_name(0)
                    pass

                elif la_ == 2:
                    self.state = 420 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 419
                        _la = self._input.LA(1)
                        if not(_la==52 or _la==53):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 422 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==52 or _la==53):
                            break

                    pass


                self.state = 426
                self.match(PythonParser.IMPORT)
                self.state = 433
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 427
                    self.match(PythonParser.STAR)
                    pass
                elif token in [101]:
                    self.state = 428
                    self.match(PythonParser.OPEN_PAREN)
                    self.state = 429
                    self.import_as_names()
                    self.state = 430
                    self.match(PythonParser.CLOSE_PAREN)
                    pass
                elif token in [39, 40, 107]:
                    self.state = 432
                    self.import_as_names()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [11]:
                localctx = PythonParser.Global_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 435
                self.match(PythonParser.GLOBAL)
                self.state = 436
                self.name()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 437
                    self.match(PythonParser.COMMA)
                    self.state = 438
                    self.name()
                    self.state = 443
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [12]:
                localctx = PythonParser.Assert_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 444
                self.match(PythonParser.ASSERT)
                self.state = 445
                self.test()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 446
                    self.match(PythonParser.COMMA)
                    self.state = 447
                    self.test()


                pass
            elif token in [9]:
                localctx = PythonParser.Nonlocal_stmtContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 450
                self.match(PythonParser.NONLOCAL)
                self.state = 451
                self.name()
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==56:
                    self.state = 452
                    self.match(PythonParser.COMMA)
                    self.state = 453
                    self.name()
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_exprContext,i)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_testlist_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_star_expr" ):
                listener.enterTestlist_star_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_star_expr" ):
                listener.exitTestlist_star_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_star_expr" ):
                return visitor.visitTestlist_star_expr(self)
            else:
                return visitor.visitChildren(self)




    def testlist_star_expr(self):

        localctx = PythonParser.Testlist_star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_testlist_star_expr)
        try:
            self.state = 476
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 467 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 463
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                            self.state = 461
                            self.test()
                            pass
                        elif token in [55]:
                            self.state = 462
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)

                        self.state = 465
                        self.match(PythonParser.COMMA)

                    else:
                        raise NoViableAltException(self)
                    self.state = 469 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

                self.state = 473
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 471
                    self.test()

                elif la_ == 2:
                    self.state = 472
                    self.star_expr()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.testlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Star_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_star_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStar_expr" ):
                listener.enterStar_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStar_expr" ):
                listener.exitStar_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStar_expr" ):
                return visitor.visitStar_expr(self)
            else:
                return visitor.visitChildren(self)




    def star_expr(self):

        localctx = PythonParser.Star_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_star_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(PythonParser.STAR)
            self.state = 479
            self.expr(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Assign_partContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.ASSIGN)
            else:
                return self.getToken(PythonParser.ASSIGN, i)

        def testlist_star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Testlist_star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Testlist_star_exprContext,i)


        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def ADD_ASSIGN(self):
            return self.getToken(PythonParser.ADD_ASSIGN, 0)

        def SUB_ASSIGN(self):
            return self.getToken(PythonParser.SUB_ASSIGN, 0)

        def MULT_ASSIGN(self):
            return self.getToken(PythonParser.MULT_ASSIGN, 0)

        def AT_ASSIGN(self):
            return self.getToken(PythonParser.AT_ASSIGN, 0)

        def DIV_ASSIGN(self):
            return self.getToken(PythonParser.DIV_ASSIGN, 0)

        def MOD_ASSIGN(self):
            return self.getToken(PythonParser.MOD_ASSIGN, 0)

        def AND_ASSIGN(self):
            return self.getToken(PythonParser.AND_ASSIGN, 0)

        def OR_ASSIGN(self):
            return self.getToken(PythonParser.OR_ASSIGN, 0)

        def XOR_ASSIGN(self):
            return self.getToken(PythonParser.XOR_ASSIGN, 0)

        def LEFT_SHIFT_ASSIGN(self):
            return self.getToken(PythonParser.LEFT_SHIFT_ASSIGN, 0)

        def RIGHT_SHIFT_ASSIGN(self):
            return self.getToken(PythonParser.RIGHT_SHIFT_ASSIGN, 0)

        def POWER_ASSIGN(self):
            return self.getToken(PythonParser.POWER_ASSIGN, 0)

        def IDIV_ASSIGN(self):
            return self.getToken(PythonParser.IDIV_ASSIGN, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_assign_part

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssign_part" ):
                listener.enterAssign_part(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssign_part" ):
                listener.exitAssign_part(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssign_part" ):
                return visitor.visitAssign_part(self)
            else:
                return visitor.visitChildren(self)




    def assign_part(self):

        localctx = PythonParser.Assign_partContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_assign_part)
        self._la = 0 # Token type
        try:
            self.state = 508
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [60]:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.match(PythonParser.ASSIGN)
                self.state = 495
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                    self.state = 482
                    self.testlist_star_expr()
                    self.state = 487
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 483
                            self.match(PythonParser.ASSIGN)
                            self.state = 484
                            self.testlist_star_expr() 
                        self.state = 489
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==60:
                        self.state = 490
                        self.match(PythonParser.ASSIGN)
                        self.state = 491
                        self.yield_expr()


                    pass
                elif token in [30]:
                    self.state = 494
                    self.yield_expr()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.match(PythonParser.COLON)
                self.state = 498
                self.test()
                self.state = 501
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 499
                    self.match(PythonParser.ASSIGN)
                    self.state = 500
                    self.testlist()


                pass
            elif token in [81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & 8191) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 506
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 504
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                    self.state = 505
                    self.testlist()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExprlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_exprlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExprlist" ):
                listener.enterExprlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExprlist" ):
                listener.exitExprlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExprlist" ):
                return visitor.visitExprlist(self)
            else:
                return visitor.visitChildren(self)




    def exprlist(self):

        localctx = PythonParser.ExprlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_exprlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 510
            self.expr(0)
            self.state = 515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 511
                    self.match(PythonParser.COMMA)
                    self.state = 512
                    self.expr(0) 
                self.state = 517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

            self.state = 519
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 518
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def import_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Import_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Import_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_import_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_names" ):
                listener.enterImport_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_names" ):
                listener.exitImport_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_names" ):
                return visitor.visitImport_as_names(self)
            else:
                return visitor.visitChildren(self)




    def import_as_names(self):

        localctx = PythonParser.Import_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_import_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 521
            self.import_as_name()
            self.state = 526
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,73,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 522
                    self.match(PythonParser.COMMA)
                    self.state = 523
                    self.import_as_name() 
                self.state = 528
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,73,self._ctx)

            self.state = 530
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 529
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Import_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.NameContext)
            else:
                return self.getTypedRuleContext(PythonParser.NameContext,i)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_import_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterImport_as_name" ):
                listener.enterImport_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitImport_as_name" ):
                listener.exitImport_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitImport_as_name" ):
                return visitor.visitImport_as_name(self)
            else:
                return visitor.visitChildren(self)




    def import_as_name(self):

        localctx = PythonParser.Import_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_import_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.name()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 533
                self.match(PythonParser.AS)
                self.state = 534
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_namesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_as_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Dotted_as_nameContext)
            else:
                return self.getTypedRuleContext(PythonParser.Dotted_as_nameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_names

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_names" ):
                listener.enterDotted_as_names(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_names" ):
                listener.exitDotted_as_names(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_names" ):
                return visitor.visitDotted_as_names(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_names(self):

        localctx = PythonParser.Dotted_as_namesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dotted_as_names)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.dotted_as_name()
            self.state = 542
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==56:
                self.state = 538
                self.match(PythonParser.COMMA)
                self.state = 539
                self.dotted_as_name()
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_as_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def AS(self):
            return self.getToken(PythonParser.AS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dotted_as_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_as_name" ):
                listener.enterDotted_as_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_as_name" ):
                listener.exitDotted_as_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_as_name" ):
                return visitor.visitDotted_as_name(self)
            else:
                return visitor.visitChildren(self)




    def dotted_as_name(self):

        localctx = PythonParser.Dotted_as_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dotted_as_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 545
            self.dotted_name(0)
            self.state = 548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 546
                self.match(PythonParser.AS)
                self.state = 547
                self.name()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(PythonParser.Logical_testContext,i)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def ELSE(self):
            return self.getToken(PythonParser.ELSE, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def LAMBDA(self):
            return self.getToken(PythonParser.LAMBDA, 0)

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def varargslist(self):
            return self.getTypedRuleContext(PythonParser.VarargslistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTest" ):
                listener.enterTest(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTest" ):
                listener.exitTest(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTest" ):
                return visitor.visitTest(self)
            else:
                return visitor.visitChildren(self)




    def test(self):

        localctx = PythonParser.TestContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_test)
        self._la = 0 # Token type
        try:
            self.state = 564
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 550
                self.logical_test(0)
                self.state = 556
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                if la_ == 1:
                    self.state = 551
                    self.match(PythonParser.IF)
                    self.state = 552
                    self.logical_test(0)
                    self.state = 553
                    self.match(PythonParser.ELSE)
                    self.state = 554
                    self.test()


                pass
            elif token in [24]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.match(PythonParser.LAMBDA)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 612491198589829120) != 0) or _la==107:
                    self.state = 559
                    self.varargslist()


                self.state = 562
                self.match(PythonParser.COLON)
                self.state = 563
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargslistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def varargs(self):
            return self.getTypedRuleContext(PythonParser.VarargsContext,0)


        def varkwargs(self):
            return self.getTypedRuleContext(PythonParser.VarkwargsContext,0)


        def vardef_parameters(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Vardef_parametersContext)
            else:
                return self.getTypedRuleContext(PythonParser.Vardef_parametersContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_varargslist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargslist" ):
                listener.enterVarargslist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargslist" ):
                listener.exitVarargslist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargslist" ):
                return visitor.visitVarargslist(self)
            else:
                return visitor.visitChildren(self)




    def varargslist(self):

        localctx = PythonParser.VarargslistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_varargslist)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 569
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
                if la_ == 1:
                    self.state = 566
                    self.vardef_parameters()
                    self.state = 567
                    self.match(PythonParser.COMMA)


                self.state = 581
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [55]:
                    self.state = 571
                    self.varargs()
                    self.state = 574
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,82,self._ctx)
                    if la_ == 1:
                        self.state = 572
                        self.match(PythonParser.COMMA)
                        self.state = 573
                        self.vardef_parameters()


                    self.state = 578
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                    if la_ == 1:
                        self.state = 576
                        self.match(PythonParser.COMMA)
                        self.state = 577
                        self.varkwargs()


                    pass
                elif token in [59]:
                    self.state = 580
                    self.varkwargs()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 583
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.vardef_parameters()
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 587
                    self.match(PythonParser.COMMA)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vardef_parameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Vardef_parameterContext)
            else:
                return self.getTypedRuleContext(PythonParser.Vardef_parameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_vardef_parameters

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameters" ):
                listener.enterVardef_parameters(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameters" ):
                listener.exitVardef_parameters(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameters" ):
                return visitor.visitVardef_parameters(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameters(self):

        localctx = PythonParser.Vardef_parametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vardef_parameters)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.vardef_parameter()
            self.state = 597
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 593
                    self.match(PythonParser.COMMA)
                    self.state = 594
                    self.vardef_parameter() 
                self.state = 599
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vardef_parameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_vardef_parameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVardef_parameter" ):
                listener.enterVardef_parameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVardef_parameter" ):
                listener.exitVardef_parameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVardef_parameter" ):
                return visitor.visitVardef_parameter(self)
            else:
                return visitor.visitChildren(self)




    def vardef_parameter(self):

        localctx = PythonParser.Vardef_parameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vardef_parameter)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 40, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self.name()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60:
                    self.state = 601
                    self.match(PythonParser.ASSIGN)
                    self.state = 602
                    self.test()


                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(PythonParser.STAR)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_varargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarargs" ):
                listener.enterVarargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarargs" ):
                listener.exitVarargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarargs" ):
                return visitor.visitVarargs(self)
            else:
                return visitor.visitChildren(self)




    def varargs(self):

        localctx = PythonParser.VarargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_varargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 608
            self.match(PythonParser.STAR)
            self.state = 609
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VarkwargsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_varkwargs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVarkwargs" ):
                listener.enterVarkwargs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVarkwargs" ):
                listener.exitVarkwargs(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVarkwargs" ):
                return visitor.visitVarkwargs(self)
            else:
                return visitor.visitChildren(self)




    def varkwargs(self):

        localctx = PythonParser.VarkwargsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_varkwargs)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 611
            self.match(PythonParser.POWER)
            self.state = 612
            self.name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Logical_testContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def comparison(self):
            return self.getTypedRuleContext(PythonParser.ComparisonContext,0)


        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def logical_test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Logical_testContext)
            else:
                return self.getTypedRuleContext(PythonParser.Logical_testContext,i)


        def AND(self):
            return self.getToken(PythonParser.AND, 0)

        def OR(self):
            return self.getToken(PythonParser.OR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_logical_test

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogical_test" ):
                listener.enterLogical_test(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogical_test" ):
                listener.exitLogical_test(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogical_test" ):
                return visitor.visitLogical_test(self)
            else:
                return visitor.visitChildren(self)



    def logical_test(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Logical_testContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_logical_test, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.state = 615
                self.comparison(0)
                pass
            elif token in [27]:
                self.state = 616
                self.match(PythonParser.NOT)
                self.state = 617
                self.logical_test(3)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,93,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 626
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 620
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 621
                        localctx.op = self.match(PythonParser.AND)
                        self.state = 622
                        self.logical_test(3)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.Logical_testContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logical_test)
                        self.state = 623
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 624
                        localctx.op = self.match(PythonParser.OR)
                        self.state = 625
                        self.logical_test(2)
                        pass

             
                self.state = 630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,93,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ComparisonContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.optional = None # Token

        def expr(self):
            return self.getTypedRuleContext(PythonParser.ExprContext,0)


        def comparison(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ComparisonContext)
            else:
                return self.getTypedRuleContext(PythonParser.ComparisonContext,i)


        def LESS_THAN(self):
            return self.getToken(PythonParser.LESS_THAN, 0)

        def GREATER_THAN(self):
            return self.getToken(PythonParser.GREATER_THAN, 0)

        def EQUALS(self):
            return self.getToken(PythonParser.EQUALS, 0)

        def GT_EQ(self):
            return self.getToken(PythonParser.GT_EQ, 0)

        def LT_EQ(self):
            return self.getToken(PythonParser.LT_EQ, 0)

        def NOT_EQ_1(self):
            return self.getToken(PythonParser.NOT_EQ_1, 0)

        def NOT_EQ_2(self):
            return self.getToken(PythonParser.NOT_EQ_2, 0)

        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def IS(self):
            return self.getToken(PythonParser.IS, 0)

        def NOT(self):
            return self.getToken(PythonParser.NOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_comparison

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparison" ):
                listener.enterComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparison" ):
                listener.exitComparison(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComparison" ):
                return visitor.visitComparison(self)
            else:
                return visitor.visitChildren(self)



    def comparison(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ComparisonContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_comparison, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 632
            self.expr(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 655
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.ComparisonContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_comparison)
                    self.state = 634
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 650
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [72]:
                        self.state = 635
                        self.match(PythonParser.LESS_THAN)
                        pass
                    elif token in [73]:
                        self.state = 636
                        self.match(PythonParser.GREATER_THAN)
                        pass
                    elif token in [74]:
                        self.state = 637
                        self.match(PythonParser.EQUALS)
                        pass
                    elif token in [75]:
                        self.state = 638
                        self.match(PythonParser.GT_EQ)
                        pass
                    elif token in [76]:
                        self.state = 639
                        self.match(PythonParser.LT_EQ)
                        pass
                    elif token in [77]:
                        self.state = 640
                        self.match(PythonParser.NOT_EQ_1)
                        pass
                    elif token in [78]:
                        self.state = 641
                        self.match(PythonParser.NOT_EQ_2)
                        pass
                    elif token in [18, 27]:
                        self.state = 643
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 642
                            localctx.optional = self.match(PythonParser.NOT)


                        self.state = 645
                        self.match(PythonParser.IN)
                        pass
                    elif token in [28]:
                        self.state = 646
                        self.match(PythonParser.IS)
                        self.state = 648
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==27:
                            self.state = 647
                            localctx.optional = self.match(PythonParser.NOT)


                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 652
                    self.comparison(3) 
                self.state = 657
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.op = None # Token

        def atom(self):
            return self.getTypedRuleContext(PythonParser.AtomContext,0)


        def AWAIT(self):
            return self.getToken(PythonParser.AWAIT, 0)

        def trailer(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TrailerContext)
            else:
                return self.getTypedRuleContext(PythonParser.TrailerContext,i)


        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def ADD(self):
            return self.getToken(PythonParser.ADD, 0)

        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def NOT_OP(self):
            return self.getToken(PythonParser.NOT_OP, 0)

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def DIV(self):
            return self.getToken(PythonParser.DIV, 0)

        def MOD(self):
            return self.getToken(PythonParser.MOD, 0)

        def IDIV(self):
            return self.getToken(PythonParser.IDIV, 0)

        def AT(self):
            return self.getToken(PythonParser.AT, 0)

        def LEFT_SHIFT(self):
            return self.getToken(PythonParser.LEFT_SHIFT, 0)

        def RIGHT_SHIFT(self):
            return self.getToken(PythonParser.RIGHT_SHIFT, 0)

        def AND_OP(self):
            return self.getToken(PythonParser.AND_OP, 0)

        def XOR(self):
            return self.getToken(PythonParser.XOR, 0)

        def OR_OP(self):
            return self.getToken(PythonParser.OR_OP, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpr" ):
                listener.enterExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpr" ):
                listener.exitExpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpr" ):
                return visitor.visitExpr(self)
            else:
                return visitor.visitChildren(self)



    def expr(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.ExprContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_expr, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 671
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.state = 660
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==36:
                    self.state = 659
                    self.match(PythonParser.AWAIT)


                self.state = 662
                self.atom()
                self.state = 666
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,99,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 663
                        self.trailer() 
                    self.state = 668
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,99,self._ctx)

                pass

            elif la_ == 2:
                self.state = 669
                localctx.op = self._input.LT(1)
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 35) != 0)):
                    localctx.op = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 670
                self.expr(7)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 696
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,102,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 694
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                    if la_ == 1:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 673
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 674
                        localctx.op = self.match(PythonParser.POWER)
                        self.state = 675
                        self.expr(8)
                        pass

                    elif la_ == 2:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 676
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 677
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 16834561) != 0)):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 678
                        self.expr(7)
                        pass

                    elif la_ == 3:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 679
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 680
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==66 or _la==67):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 681
                        self.expr(6)
                        pass

                    elif la_ == 4:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 682
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 683
                        localctx.op = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==64 or _la==65):
                            localctx.op = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 684
                        self.expr(5)
                        pass

                    elif la_ == 5:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 685
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 686
                        localctx.op = self.match(PythonParser.AND_OP)
                        self.state = 687
                        self.expr(4)
                        pass

                    elif la_ == 6:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 688
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 689
                        localctx.op = self.match(PythonParser.XOR)
                        self.state = 690
                        self.expr(3)
                        pass

                    elif la_ == 7:
                        localctx = PythonParser.ExprContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expr)
                        self.state = 691
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 692
                        localctx.op = self.match(PythonParser.OR_OP)
                        self.state = 693
                        self.expr(2)
                        pass

             
                self.state = 698
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,102,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def yield_expr(self):
            return self.getTypedRuleContext(PythonParser.Yield_exprContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonParser.Testlist_compContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(PythonParser.OPEN_BRACKET, 0)

        def CLOSE_BRACKET(self):
            return self.getToken(PythonParser.CLOSE_BRACKET, 0)

        def OPEN_BRACE(self):
            return self.getToken(PythonParser.OPEN_BRACE, 0)

        def CLOSE_BRACE(self):
            return self.getToken(PythonParser.CLOSE_BRACE, 0)

        def dictorsetmaker(self):
            return self.getTypedRuleContext(PythonParser.DictorsetmakerContext,0)


        def REVERSE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.REVERSE_QUOTE)
            else:
                return self.getToken(PythonParser.REVERSE_QUOTE, i)

        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def COMMA(self):
            return self.getToken(PythonParser.COMMA, 0)

        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def PRINT(self):
            return self.getToken(PythonParser.PRINT, 0)

        def EXEC(self):
            return self.getToken(PythonParser.EXEC, 0)

        def number(self):
            return self.getTypedRuleContext(PythonParser.NumberContext,0)


        def MINUS(self):
            return self.getToken(PythonParser.MINUS, 0)

        def NONE(self):
            return self.getToken(PythonParser.NONE, 0)

        def STRING(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.STRING)
            else:
                return self.getToken(PythonParser.STRING, i)

        def getRuleIndex(self):
            return PythonParser.RULE_atom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtom" ):
                listener.enterAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtom" ):
                listener.exitAtom(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAtom" ):
                return visitor.visitAtom(self)
            else:
                return visitor.visitChildren(self)




    def atom(self):

        localctx = PythonParser.AtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_atom)
        self._la = 0 # Token type
        try:
            self.state = 736
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 699
                self.match(PythonParser.OPEN_PAREN)
                self.state = 702
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [30]:
                    self.state = 700
                    self.yield_expr()
                    pass
                elif token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 55, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                    self.state = 701
                    self.testlist_comp()
                    pass
                elif token in [102]:
                    pass
                else:
                    pass
                self.state = 704
                self.match(PythonParser.CLOSE_PAREN)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.match(PythonParser.OPEN_BRACKET)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 63052525239009280) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 706
                    self.testlist_comp()


                self.state = 709
                self.match(PythonParser.CLOSE_BRACKET)
                pass
            elif token in [103]:
                self.enterOuterAlt(localctx, 3)
                self.state = 710
                self.match(PythonParser.OPEN_BRACE)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 639513277542432768) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 711
                    self.dictorsetmaker()


                self.state = 714
                self.match(PythonParser.CLOSE_BRACE)
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 4)
                self.state = 715
                self.match(PythonParser.REVERSE_QUOTE)
                self.state = 716
                self.testlist()
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 717
                    self.match(PythonParser.COMMA)


                self.state = 720
                self.match(PythonParser.REVERSE_QUOTE)
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 5)
                self.state = 722
                self.match(PythonParser.ELLIPSIS)
                pass
            elif token in [39, 40, 107]:
                self.enterOuterAlt(localctx, 6)
                self.state = 723
                self.name()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 7)
                self.state = 724
                self.match(PythonParser.PRINT)
                pass
            elif token in [38]:
                self.enterOuterAlt(localctx, 8)
                self.state = 725
                self.match(PythonParser.EXEC)
                pass
            elif token in [67, 95, 96, 97, 98, 99, 100]:
                self.enterOuterAlt(localctx, 9)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 726
                    self.match(PythonParser.MINUS)


                self.state = 729
                self.number()
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 10)
                self.state = 730
                self.match(PythonParser.NONE)
                pass
            elif token in [94]:
                self.enterOuterAlt(localctx, 11)
                self.state = 732 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 731
                        self.match(PythonParser.STRING)

                    else:
                        raise NoViableAltException(self)
                    self.state = 734 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,108,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DictorsetmakerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COLON)
            else:
                return self.getToken(PythonParser.COLON, i)

        def POWER(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.POWER)
            else:
                return self.getToken(PythonParser.POWER, i)

        def expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ExprContext)
            else:
                return self.getTypedRuleContext(PythonParser.ExprContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def testlist_comp(self):
            return self.getTypedRuleContext(PythonParser.Testlist_compContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_dictorsetmaker

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDictorsetmaker" ):
                listener.enterDictorsetmaker(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDictorsetmaker" ):
                listener.exitDictorsetmaker(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDictorsetmaker" ):
                return visitor.visitDictorsetmaker(self)
            else:
                return visitor.visitChildren(self)




    def dictorsetmaker(self):

        localctx = PythonParser.DictorsetmakerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dictorsetmaker)
        self._la = 0 # Token type
        try:
            self.state = 769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                    self.state = 738
                    self.test()
                    self.state = 739
                    self.match(PythonParser.COLON)
                    self.state = 740
                    self.test()
                    pass
                elif token in [59]:
                    self.state = 742
                    self.match(PythonParser.POWER)
                    self.state = 743
                    self.expr(0)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 757
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,112,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 746
                        self.match(PythonParser.COMMA)
                        self.state = 753
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                            self.state = 747
                            self.test()
                            self.state = 748
                            self.match(PythonParser.COLON)
                            self.state = 749
                            self.test()
                            pass
                        elif token in [59]:
                            self.state = 751
                            self.match(PythonParser.POWER)
                            self.state = 752
                            self.expr(0)
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 759
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,112,self._ctx)

                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 760
                    self.match(PythonParser.COMMA)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 763
                self.test()
                self.state = 764
                self.match(PythonParser.COLON)
                self.state = 765
                self.test()
                self.state = 766
                self.comp_for()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 768
                self.testlist_comp()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Testlist_compContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def star_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.Star_exprContext)
            else:
                return self.getTypedRuleContext(PythonParser.Star_exprContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_testlist_comp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist_comp" ):
                listener.enterTestlist_comp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist_comp" ):
                listener.exitTestlist_comp(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist_comp" ):
                return visitor.visitTestlist_comp(self)
            else:
                return visitor.visitChildren(self)




    def testlist_comp(self):

        localctx = PythonParser.Testlist_compContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_testlist_comp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 773
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.state = 771
                self.test()
                pass
            elif token in [55]:
                self.state = 772
                self.star_expr()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 789
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.state = 775
                self.comp_for()
                pass
            elif token in [56, 102, 104, 106]:
                self.state = 783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,117,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 776
                        self.match(PythonParser.COMMA)
                        self.state = 779
                        self._errHandler.sync(self)
                        token = self._input.LA(1)
                        if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                            self.state = 777
                            self.test()
                            pass
                        elif token in [55]:
                            self.state = 778
                            self.star_expr()
                            pass
                        else:
                            raise NoViableAltException(self)
                 
                    self.state = 785
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,117,self._ctx)

                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==56:
                    self.state = 786
                    self.match(PythonParser.COMMA)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TestlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_testlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTestlist" ):
                listener.enterTestlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTestlist" ):
                listener.exitTestlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTestlist" ):
                return visitor.visitTestlist(self)
            else:
                return visitor.visitChildren(self)




    def testlist(self):

        localctx = PythonParser.TestlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_testlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 791
            self.test()
            self.state = 796
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,120,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 792
                    self.match(PythonParser.COMMA)
                    self.state = 793
                    self.test() 
                self.state = 798
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,120,self._ctx)

            self.state = 800
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.state = 799
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dotted_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def dotted_name(self):
            return self.getTypedRuleContext(PythonParser.Dotted_nameContext,0)


        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_dotted_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDotted_name" ):
                listener.enterDotted_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDotted_name" ):
                listener.exitDotted_name(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDotted_name" ):
                return visitor.visitDotted_name(self)
            else:
                return visitor.visitChildren(self)



    def dotted_name(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = PythonParser.Dotted_nameContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 88
        self.enterRecursionRule(localctx, 88, self.RULE_dotted_name, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.name()
            self._ctx.stop = self._input.LT(-1)
            self.state = 810
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,122,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = PythonParser.Dotted_nameContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_dotted_name)
                    self.state = 805
                    if not self.precpred(self._ctx, 2):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                    self.state = 806
                    self.match(PythonParser.DOT)
                    self.state = 807
                    self.name() 
                self.state = 812
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,122,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NAME(self):
            return self.getToken(PythonParser.NAME, 0)

        def TRUE(self):
            return self.getToken(PythonParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(PythonParser.FALSE, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterName" ):
                listener.enterName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitName" ):
                listener.exitName(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitName" ):
                return visitor.visitName(self)
            else:
                return visitor.visitChildren(self)




    def name(self):

        localctx = PythonParser.NameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            _la = self._input.LA(1)
            if not(_la==39 or _la==40 or _la==107):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def integer(self):
            return self.getTypedRuleContext(PythonParser.IntegerContext,0)


        def IMAG_NUMBER(self):
            return self.getToken(PythonParser.IMAG_NUMBER, 0)

        def FLOAT_NUMBER(self):
            return self.getToken(PythonParser.FLOAT_NUMBER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNumber" ):
                return visitor.visitNumber(self)
            else:
                return visitor.visitChildren(self)




    def number(self):

        localctx = PythonParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_number)
        try:
            self.state = 818
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [95, 96, 97, 98]:
                self.enterOuterAlt(localctx, 1)
                self.state = 815
                self.integer()
                pass
            elif token in [99]:
                self.enterOuterAlt(localctx, 2)
                self.state = 816
                self.match(PythonParser.IMAG_NUMBER)
                pass
            elif token in [100]:
                self.enterOuterAlt(localctx, 3)
                self.state = 817
                self.match(PythonParser.FLOAT_NUMBER)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntegerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_INTEGER(self):
            return self.getToken(PythonParser.DECIMAL_INTEGER, 0)

        def OCT_INTEGER(self):
            return self.getToken(PythonParser.OCT_INTEGER, 0)

        def HEX_INTEGER(self):
            return self.getToken(PythonParser.HEX_INTEGER, 0)

        def BIN_INTEGER(self):
            return self.getToken(PythonParser.BIN_INTEGER, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_integer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInteger" ):
                listener.enterInteger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInteger" ):
                listener.exitInteger(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInteger" ):
                return visitor.visitInteger(self)
            else:
                return visitor.visitChildren(self)




    def integer(self):

        localctx = PythonParser.IntegerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_integer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 820
            _la = self._input.LA(1)
            if not(((((_la - 95)) & ~0x3f) == 0 and ((1 << (_la - 95)) & 15) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_exprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def YIELD(self):
            return self.getToken(PythonParser.YIELD, 0)

        def yield_arg(self):
            return self.getTypedRuleContext(PythonParser.Yield_argContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_expr" ):
                listener.enterYield_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_expr" ):
                listener.exitYield_expr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_expr" ):
                return visitor.visitYield_expr(self)
            else:
                return visitor.visitChildren(self)




    def yield_expr(self):

        localctx = PythonParser.Yield_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_yield_expr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(PythonParser.YIELD)
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.state = 823
                self.yield_arg()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Yield_argContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FROM(self):
            return self.getToken(PythonParser.FROM, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def testlist(self):
            return self.getTypedRuleContext(PythonParser.TestlistContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_yield_arg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterYield_arg" ):
                listener.enterYield_arg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitYield_arg" ):
                listener.exitYield_arg(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitYield_arg" ):
                return visitor.visitYield_arg(self)
            else:
                return visitor.visitChildren(self)




    def yield_arg(self):

        localctx = PythonParser.Yield_argContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_yield_arg)
        try:
            self.state = 829
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7]:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.match(PythonParser.FROM)
                self.state = 827
                self.test()
                pass
            elif token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 2)
                self.state = 828
                self.testlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT(self):
            return self.getToken(PythonParser.DOT, 0)

        def name(self):
            return self.getTypedRuleContext(PythonParser.NameContext,0)


        def quantum_gates_definition(self):
            return self.getTypedRuleContext(PythonParser.Quantum_gates_definitionContext,0)


        def arguments(self):
            return self.getTypedRuleContext(PythonParser.ArgumentsContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_trailer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailer" ):
                listener.enterTrailer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailer" ):
                listener.exitTrailer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailer" ):
                return visitor.visitTrailer(self)
            else:
                return visitor.visitChildren(self)




    def trailer(self):

        localctx = PythonParser.TrailerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_trailer)
        try:
            self.state = 840
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [52]:
                self.enterOuterAlt(localctx, 1)
                self.state = 831
                self.match(PythonParser.DOT)
                self.state = 834
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [39, 40, 107]:
                    self.state = 832
                    self.name()
                    pass
                elif token in [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51]:
                    self.state = 833
                    self.quantum_gates_definition()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,127,self._ctx)
                if la_ == 1:
                    self.state = 836
                    self.arguments()


                pass
            elif token in [101, 105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.arguments()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OPEN_PAREN(self):
            return self.getToken(PythonParser.OPEN_PAREN, 0)

        def CLOSE_PAREN(self):
            return self.getToken(PythonParser.CLOSE_PAREN, 0)

        def arglist(self):
            return self.getTypedRuleContext(PythonParser.ArglistContext,0)


        def OPEN_BRACKET(self):
            return self.getToken(PythonParser.OPEN_BRACKET, 0)

        def subscriptlist(self):
            return self.getTypedRuleContext(PythonParser.SubscriptlistContext,0)


        def CLOSE_BRACKET(self):
            return self.getToken(PythonParser.CLOSE_BRACKET, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_arguments

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArguments" ):
                listener.enterArguments(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArguments" ):
                listener.exitArguments(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArguments" ):
                return visitor.visitArguments(self)
            else:
                return visitor.visitChildren(self)




    def arguments(self):

        localctx = PythonParser.ArgumentsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_arguments)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [101]:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.match(PythonParser.OPEN_PAREN)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 639513277542432768) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 843
                    self.arglist()


                self.state = 846
                self.match(PythonParser.CLOSE_PAREN)
                pass
            elif token in [105]:
                self.enterOuterAlt(localctx, 2)
                self.state = 847
                self.match(PythonParser.OPEN_BRACKET)
                self.state = 848
                self.subscriptlist()
                self.state = 849
                self.match(PythonParser.CLOSE_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArglistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def argument(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.ArgumentContext)
            else:
                return self.getTypedRuleContext(PythonParser.ArgumentContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_arglist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArglist" ):
                listener.enterArglist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArglist" ):
                listener.exitArglist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArglist" ):
                return visitor.visitArglist(self)
            else:
                return visitor.visitChildren(self)




    def arglist(self):

        localctx = PythonParser.ArglistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_arglist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.argument()
            self.state = 858
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,131,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 854
                    self.match(PythonParser.COMMA)
                    self.state = 855
                    self.argument() 
                self.state = 860
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,131,self._ctx)

            self.state = 862
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 861
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ArgumentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def ASSIGN(self):
            return self.getToken(PythonParser.ASSIGN, 0)

        def POWER(self):
            return self.getToken(PythonParser.POWER, 0)

        def STAR(self):
            return self.getToken(PythonParser.STAR, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_argument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterArgument" ):
                listener.enterArgument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitArgument" ):
                listener.exitArgument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitArgument" ):
                return visitor.visitArgument(self)
            else:
                return visitor.visitChildren(self)




    def argument(self):

        localctx = PythonParser.ArgumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_argument)
        self._la = 0 # Token type
        try:
            self.state = 872
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [20, 24, 27, 36, 37, 38, 39, 40, 53, 54, 66, 67, 71, 94, 95, 96, 97, 98, 99, 100, 101, 103, 105, 107]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.test()
                self.state = 868
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [17]:
                    self.state = 865
                    self.comp_for()
                    pass
                elif token in [60]:
                    self.state = 866
                    self.match(PythonParser.ASSIGN)
                    self.state = 867
                    self.test()
                    pass
                elif token in [56, 102]:
                    pass
                else:
                    pass
                pass
            elif token in [55, 59]:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                _la = self._input.LA(1)
                if not(_la==55 or _la==59):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 871
                self.test()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptlistContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def subscript(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.SubscriptContext)
            else:
                return self.getTypedRuleContext(PythonParser.SubscriptContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(PythonParser.COMMA)
            else:
                return self.getToken(PythonParser.COMMA, i)

        def getRuleIndex(self):
            return PythonParser.RULE_subscriptlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscriptlist" ):
                listener.enterSubscriptlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscriptlist" ):
                listener.exitSubscriptlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscriptlist" ):
                return visitor.visitSubscriptlist(self)
            else:
                return visitor.visitChildren(self)




    def subscriptlist(self):

        localctx = PythonParser.SubscriptlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_subscriptlist)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.subscript()
            self.state = 879
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,135,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 875
                    self.match(PythonParser.COMMA)
                    self.state = 876
                    self.subscript() 
                self.state = 881
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,135,self._ctx)

            self.state = 883
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==56:
                self.state = 882
                self.match(PythonParser.COMMA)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubscriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELLIPSIS(self):
            return self.getToken(PythonParser.ELLIPSIS, 0)

        def test(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(PythonParser.TestContext)
            else:
                return self.getTypedRuleContext(PythonParser.TestContext,i)


        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def sliceop(self):
            return self.getTypedRuleContext(PythonParser.SliceopContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_subscript

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubscript" ):
                listener.enterSubscript(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubscript" ):
                listener.exitSubscript(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSubscript" ):
                return visitor.visitSubscript(self)
            else:
                return visitor.visitChildren(self)




    def subscript(self):

        localctx = PythonParser.SubscriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_subscript)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(PythonParser.ELLIPSIS)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 886
                self.test()
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 887
                    self.match(PythonParser.COLON)
                    self.state = 889
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27023728220045312) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                        self.state = 888
                        self.test()


                    self.state = 892
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==57:
                        self.state = 891
                        self.sliceop()




                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 896
                self.match(PythonParser.COLON)
                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27023728220045312) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                    self.state = 897
                    self.test()


                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==57:
                    self.state = 900
                    self.sliceop()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SliceopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COLON(self):
            return self.getToken(PythonParser.COLON, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_sliceop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSliceop" ):
                listener.enterSliceop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSliceop" ):
                listener.exitSliceop(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSliceop" ):
                return visitor.visitSliceop(self)
            else:
                return visitor.visitChildren(self)




    def sliceop(self):

        localctx = PythonParser.SliceopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_sliceop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(PythonParser.COLON)
            self.state = 907
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 27023728220045312) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & 2954669064227) != 0):
                self.state = 906
                self.test()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_forContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(PythonParser.FOR, 0)

        def exprlist(self):
            return self.getTypedRuleContext(PythonParser.ExprlistContext,0)


        def IN(self):
            return self.getToken(PythonParser.IN, 0)

        def logical_test(self):
            return self.getTypedRuleContext(PythonParser.Logical_testContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_comp_for

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_for" ):
                listener.enterComp_for(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_for" ):
                listener.exitComp_for(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_for" ):
                return visitor.visitComp_for(self)
            else:
                return visitor.visitChildren(self)




    def comp_for(self):

        localctx = PythonParser.Comp_forContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_comp_for)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(PythonParser.FOR)
            self.state = 910
            self.exprlist()
            self.state = 911
            self.match(PythonParser.IN)
            self.state = 912
            self.logical_test(0)
            self.state = 914
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==17:
                self.state = 913
                self.comp_iter()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Comp_iterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def comp_for(self):
            return self.getTypedRuleContext(PythonParser.Comp_forContext,0)


        def IF(self):
            return self.getToken(PythonParser.IF, 0)

        def test(self):
            return self.getTypedRuleContext(PythonParser.TestContext,0)


        def comp_iter(self):
            return self.getTypedRuleContext(PythonParser.Comp_iterContext,0)


        def getRuleIndex(self):
            return PythonParser.RULE_comp_iter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComp_iter" ):
                listener.enterComp_iter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComp_iter" ):
                listener.exitComp_iter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitComp_iter" ):
                return visitor.visitComp_iter(self)
            else:
                return visitor.visitChildren(self)




    def comp_iter(self):

        localctx = PythonParser.Comp_iterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_comp_iter)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [17]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.comp_for()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.match(PythonParser.IF)
                self.state = 918
                self.test()
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==13 or _la==17:
                    self.state = 919
                    self.comp_iter()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Quantum_gates_definitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONTROLLEDH(self):
            return self.getToken(PythonParser.CONTROLLEDH, 0)

        def CONTROLLEDX(self):
            return self.getToken(PythonParser.CONTROLLEDX, 0)

        def CONTROLLEDZ(self):
            return self.getToken(PythonParser.CONTROLLEDZ, 0)

        def HADAMARD(self):
            return self.getToken(PythonParser.HADAMARD, 0)

        def MEASURE(self):
            return self.getToken(PythonParser.MEASURE, 0)

        def SWAP(self):
            return self.getToken(PythonParser.SWAP, 0)

        def S(self):
            return self.getToken(PythonParser.S, 0)

        def T(self):
            return self.getToken(PythonParser.T, 0)

        def X(self):
            return self.getToken(PythonParser.X, 0)

        def Y(self):
            return self.getToken(PythonParser.Y, 0)

        def Z(self):
            return self.getToken(PythonParser.Z, 0)

        def getRuleIndex(self):
            return PythonParser.RULE_quantum_gates_definition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuantum_gates_definition" ):
                listener.enterQuantum_gates_definition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuantum_gates_definition" ):
                listener.exitQuantum_gates_definition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuantum_gates_definition" ):
                return visitor.visitQuantum_gates_definition(self)
            else:
                return visitor.visitChildren(self)




    def quantum_gates_definition(self):

        localctx = PythonParser.Quantum_gates_definitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_quantum_gates_definition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 4501400604114944) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[37] = self.logical_test_sempred
        self._predicates[38] = self.comparison_sempred
        self._predicates[39] = self.expr_sempred
        self._predicates[44] = self.dotted_name_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def logical_test_sempred(self, localctx:Logical_testContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def comparison_sempred(self, localctx:ComparisonContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 2)
         

    def expr_sempred(self, localctx:ExprContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def dotted_name_sempred(self, localctx:Dotted_nameContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 2)
         




